generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "./pothos-types.ts"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL_LOCAL")
  extensions = [postgis(version: "3.4.2")]
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  content   String?
  babyBirth DateTime? @map("baby_birth") @db.Timestamptz()

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  addresses UserAddress[]
  files     UserFile[]

  @@map("users")
}

model UserFile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  file   File @relation(fields: [fileId], references: [id])
  fileId Int  @map("file_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("user_file")
}

model UserAddress {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int     @map("address_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("user_address")
}

model Post {
  id        Int     @id @default(autoincrement())
  content   String
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int     @map("address_id")

  files PostFile[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("post")
}

model PostFile {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @map("post_id")
  file   File @relation(fields: [fileId], references: [id])
  fileId Int  @map("file_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("post_file")
}

model File {
  id       Int             @id @default(autoincrement())
  location String
  type     FileStorageType @default(S3)

  posts    PostFile[]
  UserFile UserFile[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("file")
}

enum FileStorageType {
  S3
}

//|code|c1|c2|c3|c4|order|created_at|deleted_at|prev_code|eng_name|name|geometry|geo_g|p_center|g_center
model Address {
  id   Int     @id @default(autoincrement())
  code String  @unique
  c1   String
  c2   String?
  c3   String?
  c4   String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  geoP    Unsupported("geometry(Geometry, 5179)") @map("geo_p")
  geoS    Unsupported("geometry(Geometry, 4326)") @map("geo_s")
  centerP Unsupported("geometry(Point, 5179)")    @map("center_p")
  centerS Unsupported("geometry(Point, 4326)")    @map("center_s")

  Post  Post[]
  users UserAddress[]

  @@index([centerP], type: Gist)
  @@index([centerS], type: Gist)
  @@map("address")
}
