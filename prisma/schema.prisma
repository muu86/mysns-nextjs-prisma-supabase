generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  output              = "../graphql/generated/type-graphql"
  formatGeneratedCode = "prettier"
  emitIdAsIDType      = true
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL_LOCAL")
  extensions = [postgis(version: "3.4.2")]
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  username  String?
  content   String?
  babyBirth DateTime? @map("baby_birth") @db.Timestamptz()

  email         String    @unique
  emailVerified DateTime? @map("email_verified") @db.Timestamptz()
  image         String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  addresses UserAddress[]
  files     UserFile[]
  Account   Account[]
  Session   Session[]

  @@map("users")
}

model UserFile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  file   File @relation(fields: [fileId], references: [id])
  fileId Int  @map("file_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("user_files")
}

model UserAddress {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int     @map("address_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("user_addresses")
}

model Post {
  id        Int     @id @default(autoincrement())
  content   String
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int     @map("address_id")

  files PostFile[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("posts")
}

model PostFile {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @map("post_id")
  file   File @relation(fields: [fileId], references: [id])
  fileId Int  @map("file_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("post_files")
}

model File {
  id       Int             @id @default(autoincrement())
  location String
  type     FileStorageType @default(S3)

  posts    PostFile[]
  UserFile UserFile[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("files")
}

enum FileStorageType {
  S3
}

//|code|c1|c2|c3|c4|order|created_at|deleted_at|prev_code|eng_name|name|geometry|geo_g|p_center|g_center
model Address {
  id   Int     @id @default(autoincrement())
  code String  @unique
  c1   String
  c2   String?
  c3   String?
  c4   String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  geoP    Unsupported("geometry(Geometry, 5179)") @map("geo_p")
  geoS    Unsupported("geometry(Geometry, 4326)") @map("geo_s")
  centerP Unsupported("geometry(Point, 5179)")    @map("center_p")
  centerS Unsupported("geometry(Point, 4326)")    @map("center_s")

  Post  Post[]
  users UserAddress[]

  @@index([centerP], type: Gist)
  @@index([centerS], type: Gist)
  @@map("addresses")
}

model Account {
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  expires      DateTime @db.Timestamptz()
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  userId    Int

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz()

  @@id([identifier, token])
  @@map("verification_tokens")
}
