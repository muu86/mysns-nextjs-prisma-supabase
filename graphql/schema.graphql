# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: Int!
}

type AccountAvgAggregate {
  expires_at: Float
  userId: Float
}

input AccountAvgOrderByAggregateInput {
  expires_at: SortOrder
  userId: SortOrder
}

type AccountCountAggregate {
  _all: Int!
  access_token: Int!
  createdAt: Int!
  expires_at: Int!
  id_token: Int!
  provider: Int!
  providerAccountId: Int!
  refresh_token: Int!
  scope: Int!
  session_state: Int!
  token_type: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO
  userId: Int!
}

input AccountCreateManyUserInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO
}

type AccountGroupBy {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  userId: Int!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTimeISO
  userId: Int
}

input AccountMaxOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTimeISO
  userId: Int
}

input AccountMinOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _avg: AccountAvgOrderByAggregateInput
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
  access_token: SortOrderInput
  createdAt: SortOrder
  expires_at: SortOrderInput
  id_token: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  access_token: SortOrderInput
  createdAt: SortOrder
  expires_at: SortOrderInput
  id_token: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  access_token
  createdAt
  expires_at
  id_token
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  updatedAt
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  access_token: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expires_at: IntNullableWithAggregatesFilter
  id_token: StringNullableWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  refresh_token: StringNullableWithAggregatesFilter
  scope: StringNullableWithAggregatesFilter
  session_state: StringNullableWithAggregatesFilter
  token_type: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type AccountSumAggregate {
  expires_at: Int
  userId: Int
}

input AccountSumOrderByAggregateInput {
  expires_at: SortOrder
  userId: SortOrder
}

input AccountUpdateInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
}

input AccountUpdateManyMutationInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserNestedInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input AccountWhereUniqueInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

type Address {
  _count: AddressCount
  c1: String!
  c2: String
  c3: String
  c4: String
  code: String!
  createdAt: DateTimeISO!
  id: ID!
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  updatedAt: DateTimeISO!
  users(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddress!]!
}

type AddressAvgAggregate {
  id: Float
}

input AddressAvgOrderByAggregateInput {
  id: SortOrder
}

type AddressCount {
  posts(where: PostWhereInput): Int!
  users(where: UserAddressWhereInput): Int!
}

type AddressCountAggregate {
  _all: Int!
  c1: Int!
  c2: Int!
  c3: Int!
  c4: Int!
  code: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
}

input AddressCountOrderByAggregateInput {
  c1: SortOrder
  c2: SortOrder
  c3: SortOrder
  c4: SortOrder
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AddressCreateNestedOneWithoutPostsInput {
  connect: AddressWhereUniqueInput
}

input AddressCreateNestedOneWithoutUsersInput {
  connect: AddressWhereUniqueInput
}

type AddressGroupBy {
  _avg: AddressAvgAggregate
  _count: AddressCountAggregate
  _max: AddressMaxAggregate
  _min: AddressMinAggregate
  _sum: AddressSumAggregate
  c1: String!
  c2: String
  c3: String
  c4: String
  code: String!
  createdAt: DateTimeISO!
  id: Int!
  updatedAt: DateTimeISO!
}

type AddressMaxAggregate {
  c1: String
  c2: String
  c3: String
  c4: String
  code: String
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
}

input AddressMaxOrderByAggregateInput {
  c1: SortOrder
  c2: SortOrder
  c3: SortOrder
  c4: SortOrder
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type AddressMinAggregate {
  c1: String
  c2: String
  c3: String
  c4: String
  code: String
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
}

input AddressMinOrderByAggregateInput {
  c1: SortOrder
  c2: SortOrder
  c3: SortOrder
  c4: SortOrder
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AddressOrderByWithAggregationInput {
  _avg: AddressAvgOrderByAggregateInput
  _count: AddressCountOrderByAggregateInput
  _max: AddressMaxOrderByAggregateInput
  _min: AddressMinOrderByAggregateInput
  _sum: AddressSumOrderByAggregateInput
  c1: SortOrder
  c2: SortOrderInput
  c3: SortOrderInput
  c4: SortOrderInput
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AddressOrderByWithRelationInput {
  c1: SortOrder
  c2: SortOrderInput
  c3: SortOrderInput
  c4: SortOrderInput
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  posts: PostOrderByRelationAggregateInput
  updatedAt: SortOrder
  users: UserAddressOrderByRelationAggregateInput
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum {
  c1
  c2
  c3
  c4
  code
  createdAt
  id
  updatedAt
}

input AddressScalarWhereWithAggregatesInput {
  AND: [AddressScalarWhereWithAggregatesInput!]
  NOT: [AddressScalarWhereWithAggregatesInput!]
  OR: [AddressScalarWhereWithAggregatesInput!]
  c1: StringWithAggregatesFilter
  c2: StringNullableWithAggregatesFilter
  c3: StringNullableWithAggregatesFilter
  c4: StringNullableWithAggregatesFilter
  code: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AddressSumAggregate {
  id: Int
}

input AddressSumOrderByAggregateInput {
  id: SortOrder
}

input AddressUpdateInput {
  c1: StringFieldUpdateOperationsInput
  c2: NullableStringFieldUpdateOperationsInput
  c3: NullableStringFieldUpdateOperationsInput
  c4: NullableStringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAddressNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserAddressUpdateManyWithoutAddressNestedInput
}

input AddressUpdateManyMutationInput {
  c1: StringFieldUpdateOperationsInput
  c2: NullableStringFieldUpdateOperationsInput
  c3: NullableStringFieldUpdateOperationsInput
  c4: NullableStringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpdateOneRequiredWithoutPostsNestedInput {
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutPostsInput
}

input AddressUpdateOneRequiredWithoutUsersNestedInput {
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutUsersInput
}

input AddressUpdateToOneWithWhereWithoutPostsInput {
  data: AddressUpdateWithoutPostsInput!
  where: AddressWhereInput
}

input AddressUpdateToOneWithWhereWithoutUsersInput {
  data: AddressUpdateWithoutUsersInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutPostsInput {
  c1: StringFieldUpdateOperationsInput
  c2: NullableStringFieldUpdateOperationsInput
  c3: NullableStringFieldUpdateOperationsInput
  c4: NullableStringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserAddressUpdateManyWithoutAddressNestedInput
}

input AddressUpdateWithoutUsersInput {
  c1: StringFieldUpdateOperationsInput
  c2: NullableStringFieldUpdateOperationsInput
  c3: NullableStringFieldUpdateOperationsInput
  c4: NullableStringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAddressNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  c1: StringFilter
  c2: StringNullableFilter
  c3: StringNullableFilter
  c4: StringNullableFilter
  code: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
  users: UserAddressListRelationFilter
}

input AddressWhereUniqueInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  c1: StringFilter
  c2: StringNullableFilter
  c3: StringNullableFilter
  c4: StringNullableFilter
  code: String
  createdAt: DateTimeFilter
  id: Int
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
  users: UserAddressListRelationFilter
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
}

type AggregateAddress {
  _avg: AddressAvgAggregate
  _count: AddressCountAggregate
  _max: AddressMaxAggregate
  _min: AddressMinAggregate
  _sum: AddressSumAggregate
}

type AggregateChat {
  _avg: ChatAvgAggregate
  _count: ChatCountAggregate
  _max: ChatMaxAggregate
  _min: ChatMinAggregate
  _sum: ChatSumAggregate
}

type AggregateChatMessage {
  _avg: ChatMessageAvgAggregate
  _count: ChatMessageCountAggregate
  _max: ChatMessageMaxAggregate
  _min: ChatMessageMinAggregate
  _sum: ChatMessageSumAggregate
}

type AggregateChatUser {
  _avg: ChatUserAvgAggregate
  _count: ChatUserCountAggregate
  _max: ChatUserMaxAggregate
  _min: ChatUserMinAggregate
  _sum: ChatUserSumAggregate
}

type AggregateComment {
  _avg: CommentAvgAggregate
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  _sum: CommentSumAggregate
}

type AggregateFile {
  _avg: FileAvgAggregate
  _count: FileCountAggregate
  _max: FileMaxAggregate
  _min: FileMinAggregate
  _sum: FileSumAggregate
}

type AggregatePost {
  _avg: PostAvgAggregate
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  _sum: PostSumAggregate
}

type AggregatePostFile {
  _avg: PostFileAvgAggregate
  _count: PostFileCountAggregate
  _max: PostFileMaxAggregate
  _min: PostFileMinAggregate
  _sum: PostFileSumAggregate
}

type AggregateSession {
  _avg: SessionAvgAggregate
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
  _sum: SessionSumAggregate
}

type AggregateSpatial_ref_sys {
  _avg: Spatial_ref_sysAvgAggregate
  _count: Spatial_ref_sysCountAggregate
  _max: Spatial_ref_sysMaxAggregate
  _min: Spatial_ref_sysMinAggregate
  _sum: Spatial_ref_sysSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type AggregateUserAddress {
  _avg: UserAddressAvgAggregate
  _count: UserAddressCountAggregate
  _max: UserAddressMaxAggregate
  _min: UserAddressMinAggregate
  _sum: UserAddressSumAggregate
}

type AggregateUserFile {
  _avg: UserFileAvgAggregate
  _count: UserFileCountAggregate
  _max: UserFileMaxAggregate
  _min: UserFileMinAggregate
  _sum: UserFileSumAggregate
}

type AggregateVerificationToken {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
}

type Chat {
  _count: ChatCount
  createdAt: DateTimeISO!
  id: ID!
  messages(cursor: ChatMessageWhereUniqueInput, distinct: [ChatMessageScalarFieldEnum!], orderBy: [ChatMessageOrderByWithRelationInput!], skip: Int, take: Int, where: ChatMessageWhereInput): [ChatMessage!]!
  name: String
  updatedAt: DateTimeISO!
  users(cursor: ChatUserWhereUniqueInput, distinct: [ChatUserScalarFieldEnum!], orderBy: [ChatUserOrderByWithRelationInput!], skip: Int, take: Int, where: ChatUserWhereInput): [ChatUser!]!
}

type ChatAvgAggregate {
  id: Float
}

input ChatAvgOrderByAggregateInput {
  id: SortOrder
}

type ChatCount {
  messages(where: ChatMessageWhereInput): Int!
  users(where: ChatUserWhereInput): Int!
}

type ChatCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input ChatCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ChatCreateInput {
  createdAt: DateTimeISO
  messages: ChatMessageCreateNestedManyWithoutChatInput
  name: String
  updatedAt: DateTimeISO
  users: ChatUserCreateNestedManyWithoutChatInput
}

input ChatCreateManyInput {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input ChatCreateNestedOneWithoutMessagesInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutMessagesInput
  create: ChatCreateWithoutMessagesInput
}

input ChatCreateNestedOneWithoutUsersInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutUsersInput
  create: ChatCreateWithoutUsersInput
}

input ChatCreateOrConnectWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateOrConnectWithoutUsersInput {
  create: ChatCreateWithoutUsersInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateWithoutMessagesInput {
  createdAt: DateTimeISO
  name: String
  updatedAt: DateTimeISO
  users: ChatUserCreateNestedManyWithoutChatInput
}

input ChatCreateWithoutUsersInput {
  createdAt: DateTimeISO
  messages: ChatMessageCreateNestedManyWithoutChatInput
  name: String
  updatedAt: DateTimeISO
}

type ChatGroupBy {
  _avg: ChatAvgAggregate
  _count: ChatCountAggregate
  _max: ChatMaxAggregate
  _min: ChatMinAggregate
  _sum: ChatSumAggregate
  createdAt: DateTimeISO!
  id: Int!
  name: String
  updatedAt: DateTimeISO!
}

type ChatMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input ChatMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type ChatMessage {
  chat: Chat!
  chatId: Int!
  createdAt: DateTimeISO!
  id: ID!
  message: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: Int!
}

type ChatMessageAvgAggregate {
  chatId: Float
  id: Float
  userId: Float
}

input ChatMessageAvgOrderByAggregateInput {
  chatId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type ChatMessageCountAggregate {
  _all: Int!
  chatId: Int!
  createdAt: Int!
  id: Int!
  message: Int!
  updatedAt: Int!
  userId: Int!
}

input ChatMessageCountOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChatMessageCreateInput {
  chat: ChatCreateNestedOneWithoutMessagesInput!
  createdAt: DateTimeISO
  message: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutChatMessagesInput!
}

input ChatMessageCreateManyChatInput {
  createdAt: DateTimeISO
  id: Int
  message: String!
  updatedAt: DateTimeISO
  userId: Int!
}

input ChatMessageCreateManyChatInputEnvelope {
  data: [ChatMessageCreateManyChatInput!]!
  skipDuplicates: Boolean
}

input ChatMessageCreateManyInput {
  chatId: Int!
  createdAt: DateTimeISO
  id: Int
  message: String!
  updatedAt: DateTimeISO
  userId: Int!
}

input ChatMessageCreateManyUserInput {
  chatId: Int!
  createdAt: DateTimeISO
  id: Int
  message: String!
  updatedAt: DateTimeISO
}

input ChatMessageCreateManyUserInputEnvelope {
  data: [ChatMessageCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ChatMessageCreateNestedManyWithoutChatInput {
  connect: [ChatMessageWhereUniqueInput!]
  connectOrCreate: [ChatMessageCreateOrConnectWithoutChatInput!]
  create: [ChatMessageCreateWithoutChatInput!]
  createMany: ChatMessageCreateManyChatInputEnvelope
}

input ChatMessageCreateNestedManyWithoutUserInput {
  connect: [ChatMessageWhereUniqueInput!]
  connectOrCreate: [ChatMessageCreateOrConnectWithoutUserInput!]
  create: [ChatMessageCreateWithoutUserInput!]
  createMany: ChatMessageCreateManyUserInputEnvelope
}

input ChatMessageCreateOrConnectWithoutChatInput {
  create: ChatMessageCreateWithoutChatInput!
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageCreateOrConnectWithoutUserInput {
  create: ChatMessageCreateWithoutUserInput!
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageCreateWithoutChatInput {
  createdAt: DateTimeISO
  message: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutChatMessagesInput!
}

input ChatMessageCreateWithoutUserInput {
  chat: ChatCreateNestedOneWithoutMessagesInput!
  createdAt: DateTimeISO
  message: String!
  updatedAt: DateTimeISO
}

type ChatMessageGroupBy {
  _avg: ChatMessageAvgAggregate
  _count: ChatMessageCountAggregate
  _max: ChatMessageMaxAggregate
  _min: ChatMessageMinAggregate
  _sum: ChatMessageSumAggregate
  chatId: Int!
  createdAt: DateTimeISO!
  id: Int!
  message: String!
  updatedAt: DateTimeISO!
  userId: Int!
}

input ChatMessageListRelationFilter {
  every: ChatMessageWhereInput
  none: ChatMessageWhereInput
  some: ChatMessageWhereInput
}

type ChatMessageMaxAggregate {
  chatId: Int
  createdAt: DateTimeISO
  id: Int
  message: String
  updatedAt: DateTimeISO
  userId: Int
}

input ChatMessageMaxOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ChatMessageMinAggregate {
  chatId: Int
  createdAt: DateTimeISO
  id: Int
  message: String
  updatedAt: DateTimeISO
  userId: Int
}

input ChatMessageMinOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChatMessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatMessageOrderByWithAggregationInput {
  _avg: ChatMessageAvgOrderByAggregateInput
  _count: ChatMessageCountOrderByAggregateInput
  _max: ChatMessageMaxOrderByAggregateInput
  _min: ChatMessageMinOrderByAggregateInput
  _sum: ChatMessageSumOrderByAggregateInput
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChatMessageOrderByWithRelationInput {
  chat: ChatOrderByWithRelationInput
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ChatMessageScalarFieldEnum {
  chatId
  createdAt
  id
  message
  updatedAt
  userId
}

input ChatMessageScalarWhereInput {
  AND: [ChatMessageScalarWhereInput!]
  NOT: [ChatMessageScalarWhereInput!]
  OR: [ChatMessageScalarWhereInput!]
  chatId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input ChatMessageScalarWhereWithAggregatesInput {
  AND: [ChatMessageScalarWhereWithAggregatesInput!]
  NOT: [ChatMessageScalarWhereWithAggregatesInput!]
  OR: [ChatMessageScalarWhereWithAggregatesInput!]
  chatId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  message: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type ChatMessageSumAggregate {
  chatId: Int
  id: Int
  userId: Int
}

input ChatMessageSumOrderByAggregateInput {
  chatId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ChatMessageUpdateInput {
  chat: ChatUpdateOneRequiredWithoutMessagesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutChatMessagesNestedInput
}

input ChatMessageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatMessageUpdateManyWithWhereWithoutChatInput {
  data: ChatMessageUpdateManyMutationInput!
  where: ChatMessageScalarWhereInput!
}

input ChatMessageUpdateManyWithWhereWithoutUserInput {
  data: ChatMessageUpdateManyMutationInput!
  where: ChatMessageScalarWhereInput!
}

input ChatMessageUpdateManyWithoutChatNestedInput {
  connect: [ChatMessageWhereUniqueInput!]
  connectOrCreate: [ChatMessageCreateOrConnectWithoutChatInput!]
  create: [ChatMessageCreateWithoutChatInput!]
  createMany: ChatMessageCreateManyChatInputEnvelope
  delete: [ChatMessageWhereUniqueInput!]
  deleteMany: [ChatMessageScalarWhereInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
  set: [ChatMessageWhereUniqueInput!]
  update: [ChatMessageUpdateWithWhereUniqueWithoutChatInput!]
  updateMany: [ChatMessageUpdateManyWithWhereWithoutChatInput!]
  upsert: [ChatMessageUpsertWithWhereUniqueWithoutChatInput!]
}

input ChatMessageUpdateManyWithoutUserNestedInput {
  connect: [ChatMessageWhereUniqueInput!]
  connectOrCreate: [ChatMessageCreateOrConnectWithoutUserInput!]
  create: [ChatMessageCreateWithoutUserInput!]
  createMany: ChatMessageCreateManyUserInputEnvelope
  delete: [ChatMessageWhereUniqueInput!]
  deleteMany: [ChatMessageScalarWhereInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
  set: [ChatMessageWhereUniqueInput!]
  update: [ChatMessageUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ChatMessageUpdateManyWithWhereWithoutUserInput!]
  upsert: [ChatMessageUpsertWithWhereUniqueWithoutUserInput!]
}

input ChatMessageUpdateWithWhereUniqueWithoutChatInput {
  data: ChatMessageUpdateWithoutChatInput!
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageUpdateWithWhereUniqueWithoutUserInput {
  data: ChatMessageUpdateWithoutUserInput!
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageUpdateWithoutChatInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutChatMessagesNestedInput
}

input ChatMessageUpdateWithoutUserInput {
  chat: ChatUpdateOneRequiredWithoutMessagesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatMessageUpsertWithWhereUniqueWithoutChatInput {
  create: ChatMessageCreateWithoutChatInput!
  update: ChatMessageUpdateWithoutChatInput!
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageUpsertWithWhereUniqueWithoutUserInput {
  create: ChatMessageCreateWithoutUserInput!
  update: ChatMessageUpdateWithoutUserInput!
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageWhereInput {
  AND: [ChatMessageWhereInput!]
  NOT: [ChatMessageWhereInput!]
  OR: [ChatMessageWhereInput!]
  chat: ChatRelationFilter
  chatId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input ChatMessageWhereUniqueInput {
  AND: [ChatMessageWhereInput!]
  NOT: [ChatMessageWhereInput!]
  OR: [ChatMessageWhereInput!]
  chat: ChatRelationFilter
  chatId: IntFilter
  createdAt: DateTimeFilter
  id: Int
  message: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

type ChatMinAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input ChatMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ChatOrderByWithAggregationInput {
  _avg: ChatAvgOrderByAggregateInput
  _count: ChatCountOrderByAggregateInput
  _max: ChatMaxOrderByAggregateInput
  _min: ChatMinOrderByAggregateInput
  _sum: ChatSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrderInput
  updatedAt: SortOrder
}

input ChatOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  messages: ChatMessageOrderByRelationAggregateInput
  name: SortOrderInput
  updatedAt: SortOrder
  users: ChatUserOrderByRelationAggregateInput
}

input ChatRelationFilter {
  is: ChatWhereInput
  isNot: ChatWhereInput
}

enum ChatScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input ChatScalarWhereWithAggregatesInput {
  AND: [ChatScalarWhereWithAggregatesInput!]
  NOT: [ChatScalarWhereWithAggregatesInput!]
  OR: [ChatScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ChatSumAggregate {
  id: Int
}

input ChatSumOrderByAggregateInput {
  id: SortOrder
}

input ChatUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  messages: ChatMessageUpdateManyWithoutChatNestedInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: ChatUserUpdateManyWithoutChatNestedInput
}

input ChatUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpdateOneRequiredWithoutMessagesNestedInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutMessagesInput
  create: ChatCreateWithoutMessagesInput
  update: ChatUpdateToOneWithWhereWithoutMessagesInput
  upsert: ChatUpsertWithoutMessagesInput
}

input ChatUpdateOneRequiredWithoutUsersNestedInput {
  connect: ChatWhereUniqueInput
  connectOrCreate: ChatCreateOrConnectWithoutUsersInput
  create: ChatCreateWithoutUsersInput
  update: ChatUpdateToOneWithWhereWithoutUsersInput
  upsert: ChatUpsertWithoutUsersInput
}

input ChatUpdateToOneWithWhereWithoutMessagesInput {
  data: ChatUpdateWithoutMessagesInput!
  where: ChatWhereInput
}

input ChatUpdateToOneWithWhereWithoutUsersInput {
  data: ChatUpdateWithoutUsersInput!
  where: ChatWhereInput
}

input ChatUpdateWithoutMessagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: ChatUserUpdateManyWithoutChatNestedInput
}

input ChatUpdateWithoutUsersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  messages: ChatMessageUpdateManyWithoutChatNestedInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUpsertWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput!
  update: ChatUpdateWithoutMessagesInput!
  where: ChatWhereInput
}

input ChatUpsertWithoutUsersInput {
  create: ChatCreateWithoutUsersInput!
  update: ChatUpdateWithoutUsersInput!
  where: ChatWhereInput
}

type ChatUser {
  chat: Chat!
  chatId: Int!
  createdAt: DateTimeISO!
  id: ID!
  updatedAt: DateTimeISO!
  user: User!
  userId: Int!
}

type ChatUserAvgAggregate {
  chatId: Float
  id: Float
  userId: Float
}

input ChatUserAvgOrderByAggregateInput {
  chatId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type ChatUserCountAggregate {
  _all: Int!
  chatId: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input ChatUserCountOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChatUserCreateInput {
  chat: ChatCreateNestedOneWithoutUsersInput!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutChatsInput!
}

input ChatUserCreateManyChatInput {
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input ChatUserCreateManyChatInputEnvelope {
  data: [ChatUserCreateManyChatInput!]!
  skipDuplicates: Boolean
}

input ChatUserCreateManyInput {
  chatId: Int!
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input ChatUserCreateManyUserInput {
  chatId: Int!
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
}

input ChatUserCreateManyUserInputEnvelope {
  data: [ChatUserCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ChatUserCreateNestedManyWithoutChatInput {
  connect: [ChatUserWhereUniqueInput!]
  connectOrCreate: [ChatUserCreateOrConnectWithoutChatInput!]
  create: [ChatUserCreateWithoutChatInput!]
  createMany: ChatUserCreateManyChatInputEnvelope
}

input ChatUserCreateNestedManyWithoutUserInput {
  connect: [ChatUserWhereUniqueInput!]
  connectOrCreate: [ChatUserCreateOrConnectWithoutUserInput!]
  create: [ChatUserCreateWithoutUserInput!]
  createMany: ChatUserCreateManyUserInputEnvelope
}

input ChatUserCreateOrConnectWithoutChatInput {
  create: ChatUserCreateWithoutChatInput!
  where: ChatUserWhereUniqueInput!
}

input ChatUserCreateOrConnectWithoutUserInput {
  create: ChatUserCreateWithoutUserInput!
  where: ChatUserWhereUniqueInput!
}

input ChatUserCreateWithoutChatInput {
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutChatsInput!
}

input ChatUserCreateWithoutUserInput {
  chat: ChatCreateNestedOneWithoutUsersInput!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
}

type ChatUserGroupBy {
  _avg: ChatUserAvgAggregate
  _count: ChatUserCountAggregate
  _max: ChatUserMaxAggregate
  _min: ChatUserMinAggregate
  _sum: ChatUserSumAggregate
  chatId: Int!
  createdAt: DateTimeISO!
  id: Int!
  updatedAt: DateTimeISO!
  userId: Int!
}

input ChatUserListRelationFilter {
  every: ChatUserWhereInput
  none: ChatUserWhereInput
  some: ChatUserWhereInput
}

type ChatUserMaxAggregate {
  chatId: Int
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int
}

input ChatUserMaxOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ChatUserMinAggregate {
  chatId: Int
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int
}

input ChatUserMinOrderByAggregateInput {
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChatUserOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatUserOrderByWithAggregationInput {
  _avg: ChatUserAvgOrderByAggregateInput
  _count: ChatUserCountOrderByAggregateInput
  _max: ChatUserMaxOrderByAggregateInput
  _min: ChatUserMinOrderByAggregateInput
  _sum: ChatUserSumOrderByAggregateInput
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChatUserOrderByWithRelationInput {
  chat: ChatOrderByWithRelationInput
  chatId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ChatUserScalarFieldEnum {
  chatId
  createdAt
  id
  updatedAt
  userId
}

input ChatUserScalarWhereInput {
  AND: [ChatUserScalarWhereInput!]
  NOT: [ChatUserScalarWhereInput!]
  OR: [ChatUserScalarWhereInput!]
  chatId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input ChatUserScalarWhereWithAggregatesInput {
  AND: [ChatUserScalarWhereWithAggregatesInput!]
  NOT: [ChatUserScalarWhereWithAggregatesInput!]
  OR: [ChatUserScalarWhereWithAggregatesInput!]
  chatId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type ChatUserSumAggregate {
  chatId: Int
  id: Int
  userId: Int
}

input ChatUserSumOrderByAggregateInput {
  chatId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ChatUserUpdateInput {
  chat: ChatUpdateOneRequiredWithoutUsersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutChatsNestedInput
}

input ChatUserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUserUpdateManyWithWhereWithoutChatInput {
  data: ChatUserUpdateManyMutationInput!
  where: ChatUserScalarWhereInput!
}

input ChatUserUpdateManyWithWhereWithoutUserInput {
  data: ChatUserUpdateManyMutationInput!
  where: ChatUserScalarWhereInput!
}

input ChatUserUpdateManyWithoutChatNestedInput {
  connect: [ChatUserWhereUniqueInput!]
  connectOrCreate: [ChatUserCreateOrConnectWithoutChatInput!]
  create: [ChatUserCreateWithoutChatInput!]
  createMany: ChatUserCreateManyChatInputEnvelope
  delete: [ChatUserWhereUniqueInput!]
  deleteMany: [ChatUserScalarWhereInput!]
  disconnect: [ChatUserWhereUniqueInput!]
  set: [ChatUserWhereUniqueInput!]
  update: [ChatUserUpdateWithWhereUniqueWithoutChatInput!]
  updateMany: [ChatUserUpdateManyWithWhereWithoutChatInput!]
  upsert: [ChatUserUpsertWithWhereUniqueWithoutChatInput!]
}

input ChatUserUpdateManyWithoutUserNestedInput {
  connect: [ChatUserWhereUniqueInput!]
  connectOrCreate: [ChatUserCreateOrConnectWithoutUserInput!]
  create: [ChatUserCreateWithoutUserInput!]
  createMany: ChatUserCreateManyUserInputEnvelope
  delete: [ChatUserWhereUniqueInput!]
  deleteMany: [ChatUserScalarWhereInput!]
  disconnect: [ChatUserWhereUniqueInput!]
  set: [ChatUserWhereUniqueInput!]
  update: [ChatUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ChatUserUpdateManyWithWhereWithoutUserInput!]
  upsert: [ChatUserUpsertWithWhereUniqueWithoutUserInput!]
}

input ChatUserUpdateWithWhereUniqueWithoutChatInput {
  data: ChatUserUpdateWithoutChatInput!
  where: ChatUserWhereUniqueInput!
}

input ChatUserUpdateWithWhereUniqueWithoutUserInput {
  data: ChatUserUpdateWithoutUserInput!
  where: ChatUserWhereUniqueInput!
}

input ChatUserUpdateWithoutChatInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutChatsNestedInput
}

input ChatUserUpdateWithoutUserInput {
  chat: ChatUpdateOneRequiredWithoutUsersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChatUserUpsertWithWhereUniqueWithoutChatInput {
  create: ChatUserCreateWithoutChatInput!
  update: ChatUserUpdateWithoutChatInput!
  where: ChatUserWhereUniqueInput!
}

input ChatUserUpsertWithWhereUniqueWithoutUserInput {
  create: ChatUserCreateWithoutUserInput!
  update: ChatUserUpdateWithoutUserInput!
  where: ChatUserWhereUniqueInput!
}

input ChatUserWhereInput {
  AND: [ChatUserWhereInput!]
  NOT: [ChatUserWhereInput!]
  OR: [ChatUserWhereInput!]
  chat: ChatRelationFilter
  chatId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input ChatUserWhereUniqueInput {
  AND: [ChatUserWhereInput!]
  NOT: [ChatUserWhereInput!]
  OR: [ChatUserWhereInput!]
  chat: ChatRelationFilter
  chatId: IntFilter
  createdAt: DateTimeFilter
  id: Int
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  messages: ChatMessageListRelationFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
  users: ChatUserListRelationFilter
}

input ChatWhereUniqueInput {
  AND: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  createdAt: DateTimeFilter
  id: Int
  messages: ChatMessageListRelationFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
  users: ChatUserListRelationFilter
}

type Comment {
  content: String!
  createdAt: DateTimeISO!
  id: ID!
  post: Post!
  postId: Int!
  updatedAt: DateTimeISO!
  user: User!
  userId: Int!
}

type CommentAvgAggregate {
  id: Float
  postId: Float
  userId: Float
}

input CommentAvgOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

type CommentCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  postId: Int!
  updatedAt: Int!
  userId: Int!
}

input CommentCountOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CommentCreateInput {
  content: String!
  createdAt: DateTimeISO
  post: PostCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateManyInput {
  content: String!
  createdAt: DateTimeISO
  id: Int
  postId: Int!
  updatedAt: DateTimeISO
  userId: Int!
}

input CommentCreateManyPostInput {
  content: String!
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyUserInput {
  content: String!
  createdAt: DateTimeISO
  id: Int
  postId: Int!
  updatedAt: DateTimeISO
}

input CommentCreateManyUserInputEnvelope {
  data: [CommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentCreateNestedManyWithoutUserInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
}

input CommentCreateOrConnectWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutPostInput {
  content: String!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutCommentsInput!
}

input CommentCreateWithoutUserInput {
  content: String!
  createdAt: DateTimeISO
  post: PostCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTimeISO
}

type CommentGroupBy {
  _avg: CommentAvgAggregate
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  _sum: CommentSumAggregate
  content: String!
  createdAt: DateTimeISO!
  id: Int!
  postId: Int!
  updatedAt: DateTimeISO!
  userId: Int!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  content: String
  createdAt: DateTimeISO
  id: Int
  postId: Int
  updatedAt: DateTimeISO
  userId: Int
}

input CommentMaxOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type CommentMinAggregate {
  content: String
  createdAt: DateTimeISO
  id: Int
  postId: Int
  updatedAt: DateTimeISO
  userId: Int
}

input CommentMinOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithAggregationInput {
  _avg: CommentAvgOrderByAggregateInput
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
  _sum: CommentSumOrderByAggregateInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CommentOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum CommentScalarFieldEnum {
  content
  createdAt
  id
  postId
  updatedAt
  userId
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type CommentSumAggregate {
  id: Int
  postId: Int
  userId: Int
}

input CommentSumOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  userId: SortOrder
}

input CommentUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutPostInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutUserInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutPostNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithoutUserNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  data: CommentUpdateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutPostInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  update: CommentUpdateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input CommentWhereUniqueInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: Int
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input EnumFileStorageTypeFieldUpdateOperationsInput {
  set: FileStorageType
}

input EnumFileStorageTypeFilter {
  equals: FileStorageType
  in: [FileStorageType!]
  not: NestedEnumFileStorageTypeFilter
  notIn: [FileStorageType!]
}

input EnumFileStorageTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumFileStorageTypeFilter
  _min: NestedEnumFileStorageTypeFilter
  equals: FileStorageType
  in: [FileStorageType!]
  not: NestedEnumFileStorageTypeWithAggregatesFilter
  notIn: [FileStorageType!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

type File {
  _count: FileCount
  createdAt: DateTimeISO!
  files(cursor: UserFileWhereUniqueInput, distinct: [UserFileScalarFieldEnum!], orderBy: [UserFileOrderByWithRelationInput!], skip: Int, take: Int, where: UserFileWhereInput): [UserFile!]!
  id: ID!
  location: String!
  posts(cursor: PostFileWhereUniqueInput, distinct: [PostFileScalarFieldEnum!], orderBy: [PostFileOrderByWithRelationInput!], skip: Int, take: Int, where: PostFileWhereInput): [PostFile!]!
  type: FileStorageType!
  updatedAt: DateTimeISO!
  url: n!
}

type FileAvgAggregate {
  id: Float
}

input FileAvgOrderByAggregateInput {
  id: SortOrder
}

type FileCount {
  files(where: UserFileWhereInput): Int!
  posts(where: PostFileWhereInput): Int!
}

type FileCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  location: Int!
  type: Int!
  updatedAt: Int!
}

input FileCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  location: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input FileCreateInput {
  createdAt: DateTimeISO
  files: UserFileCreateNestedManyWithoutFileInput
  location: String!
  posts: PostFileCreateNestedManyWithoutFileInput
  type: FileStorageType
  updatedAt: DateTimeISO
}

input FileCreateManyInput {
  createdAt: DateTimeISO
  id: Int
  location: String!
  type: FileStorageType
  updatedAt: DateTimeISO
}

input FileCreateNestedOneWithoutFilesInput {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutFilesInput
  create: FileCreateWithoutFilesInput
}

input FileCreateNestedOneWithoutPostsInput {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutPostsInput
  create: FileCreateWithoutPostsInput
}

input FileCreateOrConnectWithoutFilesInput {
  create: FileCreateWithoutFilesInput!
  where: FileWhereUniqueInput!
}

input FileCreateOrConnectWithoutPostsInput {
  create: FileCreateWithoutPostsInput!
  where: FileWhereUniqueInput!
}

input FileCreateWithoutFilesInput {
  createdAt: DateTimeISO
  location: String!
  posts: PostFileCreateNestedManyWithoutFileInput
  type: FileStorageType
  updatedAt: DateTimeISO
}

input FileCreateWithoutPostsInput {
  createdAt: DateTimeISO
  files: UserFileCreateNestedManyWithoutFileInput
  location: String!
  type: FileStorageType
  updatedAt: DateTimeISO
}

type FileGroupBy {
  _avg: FileAvgAggregate
  _count: FileCountAggregate
  _max: FileMaxAggregate
  _min: FileMinAggregate
  _sum: FileSumAggregate
  createdAt: DateTimeISO!
  id: Int!
  location: String!
  type: FileStorageType!
  updatedAt: DateTimeISO!
}

type FileMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  location: String
  type: FileStorageType
  updatedAt: DateTimeISO
}

input FileMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  location: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

type FileMinAggregate {
  createdAt: DateTimeISO
  id: Int
  location: String
  type: FileStorageType
  updatedAt: DateTimeISO
}

input FileMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  location: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input FileOrderByWithAggregationInput {
  _avg: FileAvgOrderByAggregateInput
  _count: FileCountOrderByAggregateInput
  _max: FileMaxOrderByAggregateInput
  _min: FileMinOrderByAggregateInput
  _sum: FileSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  location: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input FileOrderByWithRelationInput {
  createdAt: SortOrder
  files: UserFileOrderByRelationAggregateInput
  id: SortOrder
  location: SortOrder
  posts: PostFileOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
}

input FileRelationFilter {
  is: FileWhereInput
  isNot: FileWhereInput
}

enum FileScalarFieldEnum {
  createdAt
  id
  location
  type
  updatedAt
}

input FileScalarWhereWithAggregatesInput {
  AND: [FileScalarWhereWithAggregatesInput!]
  NOT: [FileScalarWhereWithAggregatesInput!]
  OR: [FileScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  location: StringWithAggregatesFilter
  type: EnumFileStorageTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum FileStorageType {
  S3
}

type FileSumAggregate {
  id: Int
}

input FileSumOrderByAggregateInput {
  id: SortOrder
}

input FileUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutFileNestedInput
  location: StringFieldUpdateOperationsInput
  posts: PostFileUpdateManyWithoutFileNestedInput
  type: EnumFileStorageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FileUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  type: EnumFileStorageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FileUpdateOneRequiredWithoutFilesNestedInput {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutFilesInput
  create: FileCreateWithoutFilesInput
  update: FileUpdateToOneWithWhereWithoutFilesInput
  upsert: FileUpsertWithoutFilesInput
}

input FileUpdateOneRequiredWithoutPostsNestedInput {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutPostsInput
  create: FileCreateWithoutPostsInput
  update: FileUpdateToOneWithWhereWithoutPostsInput
  upsert: FileUpsertWithoutPostsInput
}

input FileUpdateToOneWithWhereWithoutFilesInput {
  data: FileUpdateWithoutFilesInput!
  where: FileWhereInput
}

input FileUpdateToOneWithWhereWithoutPostsInput {
  data: FileUpdateWithoutPostsInput!
  where: FileWhereInput
}

input FileUpdateWithoutFilesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  posts: PostFileUpdateManyWithoutFileNestedInput
  type: EnumFileStorageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FileUpdateWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutFileNestedInput
  location: StringFieldUpdateOperationsInput
  type: EnumFileStorageTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FileUpsertWithoutFilesInput {
  create: FileCreateWithoutFilesInput!
  update: FileUpdateWithoutFilesInput!
  where: FileWhereInput
}

input FileUpsertWithoutPostsInput {
  create: FileCreateWithoutPostsInput!
  update: FileUpdateWithoutPostsInput!
  where: FileWhereInput
}

input FileWhereInput {
  AND: [FileWhereInput!]
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  createdAt: DateTimeFilter
  files: UserFileListRelationFilter
  id: IntFilter
  location: StringFilter
  posts: PostFileListRelationFilter
  type: EnumFileStorageTypeFilter
  updatedAt: DateTimeFilter
}

input FileWhereUniqueInput {
  AND: [FileWhereInput!]
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  createdAt: DateTimeFilter
  files: UserFileListRelationFilter
  id: Int
  location: StringFilter
  posts: PostFileListRelationFilter
  type: EnumFileStorageTypeFilter
  updatedAt: DateTimeFilter
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyChat(data: [ChatCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyChatMessage(data: [ChatMessageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyChatUser(data: [ChatUserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyComment(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyFile(data: [FileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPostFile(data: [PostFileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySession(data: [SessionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySpatial_ref_sys(data: [Spatial_ref_sysCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserAddress(data: [UserAddressCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserFile(data: [UserFileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVerificationToken(data: [VerificationTokenCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAccount(data: AccountCreateInput!, relationLoadStrategy: RelationLoadStrategy): Account!
  createOneChat(data: ChatCreateInput!, relationLoadStrategy: RelationLoadStrategy): Chat!
  createOneChatMessage(data: ChatMessageCreateInput!, relationLoadStrategy: RelationLoadStrategy): ChatMessage!
  createOneChatUser(data: ChatUserCreateInput!, relationLoadStrategy: RelationLoadStrategy): ChatUser!
  createOneComment(data: CommentCreateInput!, relationLoadStrategy: RelationLoadStrategy): Comment!
  createOneFile(data: FileCreateInput!, relationLoadStrategy: RelationLoadStrategy): File!
  createOnePost(data: PostCreateInput!, relationLoadStrategy: RelationLoadStrategy): Post!
  createOnePostFile(data: PostFileCreateInput!, relationLoadStrategy: RelationLoadStrategy): PostFile!
  createOneSession(data: SessionCreateInput!, relationLoadStrategy: RelationLoadStrategy): Session!
  createOneSpatial_ref_sys(data: Spatial_ref_sysCreateInput!, relationLoadStrategy: RelationLoadStrategy): Spatial_ref_sys!
  createOneUser(data: UserCreateInput!, relationLoadStrategy: RelationLoadStrategy): User!
  createOneUserAddress(data: UserAddressCreateInput!, relationLoadStrategy: RelationLoadStrategy): UserAddress!
  createOneUserFile(data: UserFileCreateInput!, relationLoadStrategy: RelationLoadStrategy): UserFile!
  createOneVerificationToken(data: VerificationTokenCreateInput!, relationLoadStrategy: RelationLoadStrategy): VerificationToken!
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyAddress(where: AddressWhereInput): AffectedRowsOutput!
  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput!
  deleteManyChatMessage(where: ChatMessageWhereInput): AffectedRowsOutput!
  deleteManyChatUser(where: ChatUserWhereInput): AffectedRowsOutput!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyFile(where: FileWhereInput): AffectedRowsOutput!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyPostFile(where: PostFileWhereInput): AffectedRowsOutput!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManySpatial_ref_sys(where: Spatial_ref_sysWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyUserAddress(where: UserAddressWhereInput): AffectedRowsOutput!
  deleteManyUserFile(where: UserFileWhereInput): AffectedRowsOutput!
  deleteManyVerificationToken(where: VerificationTokenWhereInput): AffectedRowsOutput!
  deleteOneAccount(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  deleteOneAddress(relationLoadStrategy: RelationLoadStrategy, where: AddressWhereUniqueInput!): Address
  deleteOneChat(relationLoadStrategy: RelationLoadStrategy, where: ChatWhereUniqueInput!): Chat
  deleteOneChatMessage(relationLoadStrategy: RelationLoadStrategy, where: ChatMessageWhereUniqueInput!): ChatMessage
  deleteOneChatUser(relationLoadStrategy: RelationLoadStrategy, where: ChatUserWhereUniqueInput!): ChatUser
  deleteOneComment(relationLoadStrategy: RelationLoadStrategy, where: CommentWhereUniqueInput!): Comment
  deleteOneFile(relationLoadStrategy: RelationLoadStrategy, where: FileWhereUniqueInput!): File
  deleteOnePost(relationLoadStrategy: RelationLoadStrategy, where: PostWhereUniqueInput!): Post
  deleteOnePostFile(relationLoadStrategy: RelationLoadStrategy, where: PostFileWhereUniqueInput!): PostFile
  deleteOneSession(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  deleteOneSpatial_ref_sys(relationLoadStrategy: RelationLoadStrategy, where: Spatial_ref_sysWhereUniqueInput!): Spatial_ref_sys
  deleteOneUser(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  deleteOneUserAddress(relationLoadStrategy: RelationLoadStrategy, where: UserAddressWhereUniqueInput!): UserAddress
  deleteOneUserFile(relationLoadStrategy: RelationLoadStrategy, where: UserFileWhereUniqueInput!): UserFile
  deleteOneVerificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyAddress(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): AffectedRowsOutput!
  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput!
  updateManyChatMessage(data: ChatMessageUpdateManyMutationInput!, where: ChatMessageWhereInput): AffectedRowsOutput!
  updateManyChatUser(data: ChatUserUpdateManyMutationInput!, where: ChatUserWhereInput): AffectedRowsOutput!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyFile(data: FileUpdateManyMutationInput!, where: FileWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyPostFile(data: PostFileUpdateManyMutationInput!, where: PostFileWhereInput): AffectedRowsOutput!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManySpatial_ref_sys(data: Spatial_ref_sysUpdateManyMutationInput!, where: Spatial_ref_sysWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyUserAddress(data: UserAddressUpdateManyMutationInput!, where: UserAddressWhereInput): AffectedRowsOutput!
  updateManyUserFile(data: UserFileUpdateManyMutationInput!, where: UserFileWhereInput): AffectedRowsOutput!
  updateManyVerificationToken(data: VerificationTokenUpdateManyMutationInput!, where: VerificationTokenWhereInput): AffectedRowsOutput!
  updateOneAccount(data: AccountUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  updateOneAddress(data: AddressUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: AddressWhereUniqueInput!): Address
  updateOneChat(data: ChatUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: ChatWhereUniqueInput!): Chat
  updateOneChatMessage(data: ChatMessageUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: ChatMessageWhereUniqueInput!): ChatMessage
  updateOneChatUser(data: ChatUserUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: ChatUserWhereUniqueInput!): ChatUser
  updateOneComment(data: CommentUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: CommentWhereUniqueInput!): Comment
  updateOneFile(data: FileUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: FileWhereUniqueInput!): File
  updateOnePost(data: PostUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: PostWhereUniqueInput!): Post
  updateOnePostFile(data: PostFileUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: PostFileWhereUniqueInput!): PostFile
  updateOneSession(data: SessionUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  updateOneSpatial_ref_sys(data: Spatial_ref_sysUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: Spatial_ref_sysWhereUniqueInput!): Spatial_ref_sys
  updateOneUser(data: UserUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  updateOneUserAddress(data: UserAddressUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: UserAddressWhereUniqueInput!): UserAddress
  updateOneUserFile(data: UserFileUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: UserFileWhereUniqueInput!): UserFile
  updateOneVerificationToken(data: VerificationTokenUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  upsertOneAccount(create: AccountCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertOneChat(create: ChatCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat!
  upsertOneChatMessage(create: ChatMessageCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: ChatMessageUpdateInput!, where: ChatMessageWhereUniqueInput!): ChatMessage!
  upsertOneChatUser(create: ChatUserCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: ChatUserUpdateInput!, where: ChatUserWhereUniqueInput!): ChatUser!
  upsertOneComment(create: CommentCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneFile(create: FileCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: FileUpdateInput!, where: FileWhereUniqueInput!): File!
  upsertOnePost(create: PostCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOnePostFile(create: PostFileCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: PostFileUpdateInput!, where: PostFileWhereUniqueInput!): PostFile!
  upsertOneSession(create: SessionCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertOneSpatial_ref_sys(create: Spatial_ref_sysCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: Spatial_ref_sysUpdateInput!, where: Spatial_ref_sysWhereUniqueInput!): Spatial_ref_sys!
  upsertOneUser(create: UserCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneUserAddress(create: UserAddressCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: UserAddressUpdateInput!, where: UserAddressWhereUniqueInput!): UserAddress!
  upsertOneUserFile(create: UserFileCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: UserFileUpdateInput!, where: UserFileWhereUniqueInput!): UserFile!
  upsertOneVerificationToken(create: VerificationTokenCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumFileStorageTypeFilter {
  equals: FileStorageType
  in: [FileStorageType!]
  not: NestedEnumFileStorageTypeFilter
  notIn: [FileStorageType!]
}

input NestedEnumFileStorageTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumFileStorageTypeFilter
  _min: NestedEnumFileStorageTypeFilter
  equals: FileStorageType
  in: [FileStorageType!]
  not: NestedEnumFileStorageTypeWithAggregatesFilter
  notIn: [FileStorageType!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Post {
  _count: PostCount
  address: Address!
  addressId: Int!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  content: String!
  createdAt: DateTimeISO!
  files(cursor: PostFileWhereUniqueInput, distinct: [PostFileScalarFieldEnum!], orderBy: [PostFileOrderByWithRelationInput!], skip: Int, take: Int, where: PostFileWhereInput): [PostFile!]!
  id: ID!
  updatedAt: DateTimeISO!
  user: User!
  userId: Int!
}

type PostAvgAggregate {
  addressId: Float
  id: Float
  userId: Float
}

input PostAvgOrderByAggregateInput {
  addressId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type PostCount {
  comments(where: CommentWhereInput): Int!
  files(where: PostFileWhereInput): Int!
}

type PostCountAggregate {
  _all: Int!
  addressId: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input PostCountOrderByAggregateInput {
  addressId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PostCreateInput {
  address: AddressCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTimeISO
  files: PostFileCreateNestedManyWithoutPostInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateManyAddressInput {
  content: String!
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input PostCreateManyAddressInputEnvelope {
  data: [PostCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyInput {
  addressId: Int!
  content: String!
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input PostCreateManyUserInput {
  addressId: Int!
  content: String!
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
}

input PostCreateManyUserInputEnvelope {
  data: [PostCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateNestedOneWithoutFilesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutFilesInput
  create: PostCreateWithoutFilesInput
}

input PostCreateOrConnectWithoutAddressInput {
  create: PostCreateWithoutAddressInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutFilesInput {
  create: PostCreateWithoutFilesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutUserInput {
  create: PostCreateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAddressInput {
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTimeISO
  files: PostFileCreateNestedManyWithoutPostInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutCommentsInput {
  address: AddressCreateNestedOneWithoutPostsInput!
  content: String!
  createdAt: DateTimeISO
  files: PostFileCreateNestedManyWithoutPostInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutFilesInput {
  address: AddressCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutUserInput {
  address: AddressCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPostInput
  content: String!
  createdAt: DateTimeISO
  files: PostFileCreateNestedManyWithoutPostInput
  updatedAt: DateTimeISO
}

type PostFile {
  createdAt: DateTimeISO!
  file: File!
  fileId: Int!
  id: ID!
  post: Post!
  postId: Int!
  updatedAt: DateTimeISO!
}

type PostFileAvgAggregate {
  fileId: Float
  id: Float
  postId: Float
}

input PostFileAvgOrderByAggregateInput {
  fileId: SortOrder
  id: SortOrder
  postId: SortOrder
}

type PostFileCountAggregate {
  _all: Int!
  createdAt: Int!
  fileId: Int!
  id: Int!
  postId: Int!
  updatedAt: Int!
}

input PostFileCountOrderByAggregateInput {
  createdAt: SortOrder
  fileId: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input PostFileCreateInput {
  createdAt: DateTimeISO
  file: FileCreateNestedOneWithoutPostsInput!
  post: PostCreateNestedOneWithoutFilesInput!
  updatedAt: DateTimeISO
}

input PostFileCreateManyFileInput {
  createdAt: DateTimeISO
  id: Int
  postId: Int!
  updatedAt: DateTimeISO
}

input PostFileCreateManyFileInputEnvelope {
  data: [PostFileCreateManyFileInput!]!
  skipDuplicates: Boolean
}

input PostFileCreateManyInput {
  createdAt: DateTimeISO
  fileId: Int!
  id: Int
  postId: Int!
  updatedAt: DateTimeISO
}

input PostFileCreateManyPostInput {
  createdAt: DateTimeISO
  fileId: Int!
  id: Int
  updatedAt: DateTimeISO
}

input PostFileCreateManyPostInputEnvelope {
  data: [PostFileCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input PostFileCreateNestedManyWithoutFileInput {
  connect: [PostFileWhereUniqueInput!]
  connectOrCreate: [PostFileCreateOrConnectWithoutFileInput!]
  create: [PostFileCreateWithoutFileInput!]
  createMany: PostFileCreateManyFileInputEnvelope
}

input PostFileCreateNestedManyWithoutPostInput {
  connect: [PostFileWhereUniqueInput!]
  connectOrCreate: [PostFileCreateOrConnectWithoutPostInput!]
  create: [PostFileCreateWithoutPostInput!]
  createMany: PostFileCreateManyPostInputEnvelope
}

input PostFileCreateOrConnectWithoutFileInput {
  create: PostFileCreateWithoutFileInput!
  where: PostFileWhereUniqueInput!
}

input PostFileCreateOrConnectWithoutPostInput {
  create: PostFileCreateWithoutPostInput!
  where: PostFileWhereUniqueInput!
}

input PostFileCreateWithoutFileInput {
  createdAt: DateTimeISO
  post: PostCreateNestedOneWithoutFilesInput!
  updatedAt: DateTimeISO
}

input PostFileCreateWithoutPostInput {
  createdAt: DateTimeISO
  file: FileCreateNestedOneWithoutPostsInput!
  updatedAt: DateTimeISO
}

type PostFileGroupBy {
  _avg: PostFileAvgAggregate
  _count: PostFileCountAggregate
  _max: PostFileMaxAggregate
  _min: PostFileMinAggregate
  _sum: PostFileSumAggregate
  createdAt: DateTimeISO!
  fileId: Int!
  id: Int!
  postId: Int!
  updatedAt: DateTimeISO!
}

input PostFileListRelationFilter {
  every: PostFileWhereInput
  none: PostFileWhereInput
  some: PostFileWhereInput
}

type PostFileMaxAggregate {
  createdAt: DateTimeISO
  fileId: Int
  id: Int
  postId: Int
  updatedAt: DateTimeISO
}

input PostFileMaxOrderByAggregateInput {
  createdAt: SortOrder
  fileId: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

type PostFileMinAggregate {
  createdAt: DateTimeISO
  fileId: Int
  id: Int
  postId: Int
  updatedAt: DateTimeISO
}

input PostFileMinOrderByAggregateInput {
  createdAt: SortOrder
  fileId: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input PostFileOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostFileOrderByWithAggregationInput {
  _avg: PostFileAvgOrderByAggregateInput
  _count: PostFileCountOrderByAggregateInput
  _max: PostFileMaxOrderByAggregateInput
  _min: PostFileMinOrderByAggregateInput
  _sum: PostFileSumOrderByAggregateInput
  createdAt: SortOrder
  fileId: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input PostFileOrderByWithRelationInput {
  createdAt: SortOrder
  file: FileOrderByWithRelationInput
  fileId: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  updatedAt: SortOrder
}

enum PostFileScalarFieldEnum {
  createdAt
  fileId
  id
  postId
  updatedAt
}

input PostFileScalarWhereInput {
  AND: [PostFileScalarWhereInput!]
  NOT: [PostFileScalarWhereInput!]
  OR: [PostFileScalarWhereInput!]
  createdAt: DateTimeFilter
  fileId: IntFilter
  id: IntFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input PostFileScalarWhereWithAggregatesInput {
  AND: [PostFileScalarWhereWithAggregatesInput!]
  NOT: [PostFileScalarWhereWithAggregatesInput!]
  OR: [PostFileScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  fileId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PostFileSumAggregate {
  fileId: Int
  id: Int
  postId: Int
}

input PostFileSumOrderByAggregateInput {
  fileId: SortOrder
  id: SortOrder
  postId: SortOrder
}

input PostFileUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  file: FileUpdateOneRequiredWithoutPostsNestedInput
  post: PostUpdateOneRequiredWithoutFilesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostFileUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostFileUpdateManyWithWhereWithoutFileInput {
  data: PostFileUpdateManyMutationInput!
  where: PostFileScalarWhereInput!
}

input PostFileUpdateManyWithWhereWithoutPostInput {
  data: PostFileUpdateManyMutationInput!
  where: PostFileScalarWhereInput!
}

input PostFileUpdateManyWithoutFileNestedInput {
  connect: [PostFileWhereUniqueInput!]
  connectOrCreate: [PostFileCreateOrConnectWithoutFileInput!]
  create: [PostFileCreateWithoutFileInput!]
  createMany: PostFileCreateManyFileInputEnvelope
  delete: [PostFileWhereUniqueInput!]
  deleteMany: [PostFileScalarWhereInput!]
  disconnect: [PostFileWhereUniqueInput!]
  set: [PostFileWhereUniqueInput!]
  update: [PostFileUpdateWithWhereUniqueWithoutFileInput!]
  updateMany: [PostFileUpdateManyWithWhereWithoutFileInput!]
  upsert: [PostFileUpsertWithWhereUniqueWithoutFileInput!]
}

input PostFileUpdateManyWithoutPostNestedInput {
  connect: [PostFileWhereUniqueInput!]
  connectOrCreate: [PostFileCreateOrConnectWithoutPostInput!]
  create: [PostFileCreateWithoutPostInput!]
  createMany: PostFileCreateManyPostInputEnvelope
  delete: [PostFileWhereUniqueInput!]
  deleteMany: [PostFileScalarWhereInput!]
  disconnect: [PostFileWhereUniqueInput!]
  set: [PostFileWhereUniqueInput!]
  update: [PostFileUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [PostFileUpdateManyWithWhereWithoutPostInput!]
  upsert: [PostFileUpsertWithWhereUniqueWithoutPostInput!]
}

input PostFileUpdateWithWhereUniqueWithoutFileInput {
  data: PostFileUpdateWithoutFileInput!
  where: PostFileWhereUniqueInput!
}

input PostFileUpdateWithWhereUniqueWithoutPostInput {
  data: PostFileUpdateWithoutPostInput!
  where: PostFileWhereUniqueInput!
}

input PostFileUpdateWithoutFileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutFilesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostFileUpdateWithoutPostInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  file: FileUpdateOneRequiredWithoutPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostFileUpsertWithWhereUniqueWithoutFileInput {
  create: PostFileCreateWithoutFileInput!
  update: PostFileUpdateWithoutFileInput!
  where: PostFileWhereUniqueInput!
}

input PostFileUpsertWithWhereUniqueWithoutPostInput {
  create: PostFileCreateWithoutPostInput!
  update: PostFileUpdateWithoutPostInput!
  where: PostFileWhereUniqueInput!
}

input PostFileWhereInput {
  AND: [PostFileWhereInput!]
  NOT: [PostFileWhereInput!]
  OR: [PostFileWhereInput!]
  createdAt: DateTimeFilter
  file: FileRelationFilter
  fileId: IntFilter
  id: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input PostFileWhereUniqueInput {
  AND: [PostFileWhereInput!]
  NOT: [PostFileWhereInput!]
  OR: [PostFileWhereInput!]
  createdAt: DateTimeFilter
  file: FileRelationFilter
  fileId: IntFilter
  id: Int
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

type PostGroupBy {
  _avg: PostAvgAggregate
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  _sum: PostSumAggregate
  addressId: Int!
  content: String!
  createdAt: DateTimeISO!
  id: Int!
  updatedAt: DateTimeISO!
  userId: Int!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  addressId: Int
  content: String
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int
}

input PostMaxOrderByAggregateInput {
  addressId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type PostMinAggregate {
  addressId: Int
  content: String
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int
}

input PostMinOrderByAggregateInput {
  addressId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _avg: PostAvgOrderByAggregateInput
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  _sum: PostSumOrderByAggregateInput
  addressId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PostOrderByWithRelationInput {
  address: AddressOrderByWithRelationInput
  addressId: SortOrder
  comments: CommentOrderByRelationAggregateInput
  content: SortOrder
  createdAt: SortOrder
  files: PostFileOrderByRelationAggregateInput
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  addressId
  content
  createdAt
  id
  updatedAt
  userId
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  addressId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  addressId: IntWithAggregatesFilter
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type PostSumAggregate {
  addressId: Int
  id: Int
  userId: Int
}

input PostSumOrderByAggregateInput {
  addressId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input PostUpdateInput {
  address: AddressUpdateOneRequiredWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: PostFileUpdateManyWithoutPostNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAddressInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutUserInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAddressNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAddressInput!]
  create: [PostCreateWithoutAddressInput!]
  createMany: PostCreateManyAddressInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAddressInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAddressInput!]
}

input PostUpdateManyWithoutUserNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateOneRequiredWithoutCommentsNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateToOneWithWhereWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneRequiredWithoutFilesNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutFilesInput
  create: PostCreateWithoutFilesInput
  update: PostUpdateToOneWithWhereWithoutFilesInput
  upsert: PostUpsertWithoutFilesInput
}

input PostUpdateToOneWithWhereWithoutCommentsInput {
  data: PostUpdateWithoutCommentsInput!
  where: PostWhereInput
}

input PostUpdateToOneWithWhereWithoutFilesInput {
  data: PostUpdateWithoutFilesInput!
  where: PostWhereInput
}

input PostUpdateWithWhereUniqueWithoutAddressInput {
  data: PostUpdateWithoutAddressInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  data: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAddressInput {
  comments: CommentUpdateManyWithoutPostNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: PostFileUpdateManyWithoutPostNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateWithoutCommentsInput {
  address: AddressUpdateOneRequiredWithoutPostsNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: PostFileUpdateManyWithoutPostNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateWithoutFilesInput {
  address: AddressUpdateOneRequiredWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsNestedInput
}

input PostUpdateWithoutUserInput {
  address: AddressUpdateOneRequiredWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: PostFileUpdateManyWithoutPostNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAddressInput {
  create: PostCreateWithoutAddressInput!
  update: PostUpdateWithoutAddressInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  create: PostCreateWithoutUserInput!
  update: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsInput!
  where: PostWhereInput
}

input PostUpsertWithoutFilesInput {
  create: PostCreateWithoutFilesInput!
  update: PostUpdateWithoutFilesInput!
  where: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  address: AddressRelationFilter
  addressId: IntFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  files: PostFileListRelationFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  address: AddressRelationFilter
  addressId: IntFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  files: PostFileListRelationFilter
  id: Int
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

type Query {
  account(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  address(relationLoadStrategy: RelationLoadStrategy, where: AddressWhereUniqueInput!): Address
  addresses(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateAddress(cursor: AddressWhereUniqueInput, orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): AggregateAddress!
  aggregateChat(cursor: ChatWhereUniqueInput, orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): AggregateChat!
  aggregateChatMessage(cursor: ChatMessageWhereUniqueInput, orderBy: [ChatMessageOrderByWithRelationInput!], skip: Int, take: Int, where: ChatMessageWhereInput): AggregateChatMessage!
  aggregateChatUser(cursor: ChatUserWhereUniqueInput, orderBy: [ChatUserOrderByWithRelationInput!], skip: Int, take: Int, where: ChatUserWhereInput): AggregateChatUser!
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateFile(cursor: FileWhereUniqueInput, orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): AggregateFile!
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregatePostFile(cursor: PostFileWhereUniqueInput, orderBy: [PostFileOrderByWithRelationInput!], skip: Int, take: Int, where: PostFileWhereInput): AggregatePostFile!
  aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
  aggregateSpatial_ref_sys(cursor: Spatial_ref_sysWhereUniqueInput, orderBy: [Spatial_ref_sysOrderByWithRelationInput!], skip: Int, take: Int, where: Spatial_ref_sysWhereInput): AggregateSpatial_ref_sys!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUserAddress(cursor: UserAddressWhereUniqueInput, orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): AggregateUserAddress!
  aggregateUserFile(cursor: UserFileWhereUniqueInput, orderBy: [UserFileOrderByWithRelationInput!], skip: Int, take: Int, where: UserFileWhereInput): AggregateUserFile!
  aggregateVerificationToken(cursor: VerificationTokenWhereUniqueInput, orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): AggregateVerificationToken!
  chat(relationLoadStrategy: RelationLoadStrategy, where: ChatWhereUniqueInput!): Chat
  chatMessage(relationLoadStrategy: RelationLoadStrategy, where: ChatMessageWhereUniqueInput!): ChatMessage
  chatMessages(cursor: ChatMessageWhereUniqueInput, distinct: [ChatMessageScalarFieldEnum!], orderBy: [ChatMessageOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatMessageWhereInput): [ChatMessage!]!
  chatUser(relationLoadStrategy: RelationLoadStrategy, where: ChatUserWhereUniqueInput!): ChatUser
  chatUsers(cursor: ChatUserWhereUniqueInput, distinct: [ChatUserScalarFieldEnum!], orderBy: [ChatUserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatUserWhereInput): [ChatUser!]!
  chats(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatWhereInput): [Chat!]!
  comment(relationLoadStrategy: RelationLoadStrategy, where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  file(relationLoadStrategy: RelationLoadStrategy, where: FileWhereUniqueInput!): File
  files(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: FileWhereInput): [File!]!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAccountOrThrow(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAddress(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstAddressOrThrow(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstChat(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatWhereInput): Chat
  findFirstChatMessage(cursor: ChatMessageWhereUniqueInput, distinct: [ChatMessageScalarFieldEnum!], orderBy: [ChatMessageOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatMessageWhereInput): ChatMessage
  findFirstChatMessageOrThrow(cursor: ChatMessageWhereUniqueInput, distinct: [ChatMessageScalarFieldEnum!], orderBy: [ChatMessageOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatMessageWhereInput): ChatMessage
  findFirstChatOrThrow(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatWhereInput): Chat
  findFirstChatUser(cursor: ChatUserWhereUniqueInput, distinct: [ChatUserScalarFieldEnum!], orderBy: [ChatUserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatUserWhereInput): ChatUser
  findFirstChatUserOrThrow(cursor: ChatUserWhereUniqueInput, distinct: [ChatUserScalarFieldEnum!], orderBy: [ChatUserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: ChatUserWhereInput): ChatUser
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentOrThrow(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstFile(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: FileWhereInput): File
  findFirstFileOrThrow(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: FileWhereInput): File
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: PostWhereInput): Post
  findFirstPostFile(cursor: PostFileWhereUniqueInput, distinct: [PostFileScalarFieldEnum!], orderBy: [PostFileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: PostFileWhereInput): PostFile
  findFirstPostFileOrThrow(cursor: PostFileWhereUniqueInput, distinct: [PostFileScalarFieldEnum!], orderBy: [PostFileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: PostFileWhereInput): PostFile
  findFirstPostOrThrow(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: PostWhereInput): Post
  findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstSessionOrThrow(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstSpatial_ref_sys(cursor: Spatial_ref_sysWhereUniqueInput, distinct: [Spatial_ref_sysScalarFieldEnum!], orderBy: [Spatial_ref_sysOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: Spatial_ref_sysWhereInput): Spatial_ref_sys
  findFirstSpatial_ref_sysOrThrow(cursor: Spatial_ref_sysWhereUniqueInput, distinct: [Spatial_ref_sysScalarFieldEnum!], orderBy: [Spatial_ref_sysOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: Spatial_ref_sysWhereInput): Spatial_ref_sys
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserAddress(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserAddressWhereInput): UserAddress
  findFirstUserAddressOrThrow(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserAddressWhereInput): UserAddress
  findFirstUserFile(cursor: UserFileWhereUniqueInput, distinct: [UserFileScalarFieldEnum!], orderBy: [UserFileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserFileWhereInput): UserFile
  findFirstUserFileOrThrow(cursor: UserFileWhereUniqueInput, distinct: [UserFileScalarFieldEnum!], orderBy: [UserFileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserFileWhereInput): UserFile
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): User
  findFirstVerificationToken(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findFirstVerificationTokenOrThrow(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findManySpatial_ref_sys(cursor: Spatial_ref_sysWhereUniqueInput, distinct: [Spatial_ref_sysScalarFieldEnum!], orderBy: [Spatial_ref_sysOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: Spatial_ref_sysWhereInput): [Spatial_ref_sys!]!
  findUniqueSpatial_ref_sys(relationLoadStrategy: RelationLoadStrategy, where: Spatial_ref_sysWhereUniqueInput!): Spatial_ref_sys
  findUniqueSpatial_ref_sysOrThrow(relationLoadStrategy: RelationLoadStrategy, where: Spatial_ref_sysWhereUniqueInput!): Spatial_ref_sys
  getAccount(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  getAddress(relationLoadStrategy: RelationLoadStrategy, where: AddressWhereUniqueInput!): Address
  getChat(relationLoadStrategy: RelationLoadStrategy, where: ChatWhereUniqueInput!): Chat
  getChatMessage(relationLoadStrategy: RelationLoadStrategy, where: ChatMessageWhereUniqueInput!): ChatMessage
  getChatUser(relationLoadStrategy: RelationLoadStrategy, where: ChatUserWhereUniqueInput!): ChatUser
  getComment(relationLoadStrategy: RelationLoadStrategy, where: CommentWhereUniqueInput!): Comment
  getFile(relationLoadStrategy: RelationLoadStrategy, where: FileWhereUniqueInput!): File
  getPost(relationLoadStrategy: RelationLoadStrategy, where: PostWhereUniqueInput!): Post
  getPostFile(relationLoadStrategy: RelationLoadStrategy, where: PostFileWhereUniqueInput!): PostFile
  getSession(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  getUser(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  getUserAddress(relationLoadStrategy: RelationLoadStrategy, where: UserAddressWhereUniqueInput!): UserAddress
  getUserFile(relationLoadStrategy: RelationLoadStrategy, where: UserFileWhereUniqueInput!): UserFile
  getVerificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByAddress(by: [AddressScalarFieldEnum!]!, having: AddressScalarWhereWithAggregatesInput, orderBy: [AddressOrderByWithAggregationInput!], skip: Int, take: Int, where: AddressWhereInput): [AddressGroupBy!]!
  groupByChat(by: [ChatScalarFieldEnum!]!, having: ChatScalarWhereWithAggregatesInput, orderBy: [ChatOrderByWithAggregationInput!], skip: Int, take: Int, where: ChatWhereInput): [ChatGroupBy!]!
  groupByChatMessage(by: [ChatMessageScalarFieldEnum!]!, having: ChatMessageScalarWhereWithAggregatesInput, orderBy: [ChatMessageOrderByWithAggregationInput!], skip: Int, take: Int, where: ChatMessageWhereInput): [ChatMessageGroupBy!]!
  groupByChatUser(by: [ChatUserScalarFieldEnum!]!, having: ChatUserScalarWhereWithAggregatesInput, orderBy: [ChatUserOrderByWithAggregationInput!], skip: Int, take: Int, where: ChatUserWhereInput): [ChatUserGroupBy!]!
  groupByComment(by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByWithAggregationInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByFile(by: [FileScalarFieldEnum!]!, having: FileScalarWhereWithAggregatesInput, orderBy: [FileOrderByWithAggregationInput!], skip: Int, take: Int, where: FileWhereInput): [FileGroupBy!]!
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByWithAggregationInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByPostFile(by: [PostFileScalarFieldEnum!]!, having: PostFileScalarWhereWithAggregatesInput, orderBy: [PostFileOrderByWithAggregationInput!], skip: Int, take: Int, where: PostFileWhereInput): [PostFileGroupBy!]!
  groupBySession(by: [SessionScalarFieldEnum!]!, having: SessionScalarWhereWithAggregatesInput, orderBy: [SessionOrderByWithAggregationInput!], skip: Int, take: Int, where: SessionWhereInput): [SessionGroupBy!]!
  groupBySpatial_ref_sys(by: [Spatial_ref_sysScalarFieldEnum!]!, having: Spatial_ref_sysScalarWhereWithAggregatesInput, orderBy: [Spatial_ref_sysOrderByWithAggregationInput!], skip: Int, take: Int, where: Spatial_ref_sysWhereInput): [Spatial_ref_sysGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByUserAddress(by: [UserAddressScalarFieldEnum!]!, having: UserAddressScalarWhereWithAggregatesInput, orderBy: [UserAddressOrderByWithAggregationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddressGroupBy!]!
  groupByUserFile(by: [UserFileScalarFieldEnum!]!, having: UserFileScalarWhereWithAggregatesInput, orderBy: [UserFileOrderByWithAggregationInput!], skip: Int, take: Int, where: UserFileWhereInput): [UserFileGroupBy!]!
  groupByVerificationToken(by: [VerificationTokenScalarFieldEnum!]!, having: VerificationTokenScalarWhereWithAggregatesInput, orderBy: [VerificationTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationTokenGroupBy!]!
  post(relationLoadStrategy: RelationLoadStrategy, where: PostWhereUniqueInput!): Post
  postFile(relationLoadStrategy: RelationLoadStrategy, where: PostFileWhereUniqueInput!): PostFile
  postFiles(cursor: PostFileWhereUniqueInput, distinct: [PostFileScalarFieldEnum!], orderBy: [PostFileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: PostFileWhereInput): [PostFile!]!
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: PostWhereInput): [Post!]!
  session(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  user(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  userAddress(relationLoadStrategy: RelationLoadStrategy, where: UserAddressWhereUniqueInput!): UserAddress
  userAddresses(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserAddressWhereInput): [UserAddress!]!
  userFile(relationLoadStrategy: RelationLoadStrategy, where: UserFileWhereUniqueInput!): UserFile
  userFiles(cursor: UserFileWhereUniqueInput, distinct: [UserFileScalarFieldEnum!], orderBy: [UserFileOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserFileWhereInput): [UserFile!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): [User!]!
  verificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationToken!]!
}

enum QueryMode {
  default
  insensitive
}

enum RelationLoadStrategy {
  join
  query
}

enum Role {
  READ
  WRITE
}

type Session {
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  sessionToken: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: Int!
}

type SessionAvgAggregate {
  userId: Float
}

input SessionAvgOrderByAggregateInput {
  userId: SortOrder
}

type SessionCountAggregate {
  _all: Int!
  createdAt: Int!
  expires: Int!
  sessionToken: Int!
  updatedAt: Int!
  userId: Int!
}

input SessionCountOrderByAggregateInput {
  createdAt: SortOrder
  expires: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SessionCreateInput {
  createdAt: DateTimeISO
  expires: DateTimeISO!
  sessionToken: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
  createdAt: DateTimeISO
  expires: DateTimeISO!
  sessionToken: String!
  updatedAt: DateTimeISO
  userId: Int!
}

input SessionCreateManyUserInput {
  createdAt: DateTimeISO
  expires: DateTimeISO!
  sessionToken: String!
  updatedAt: DateTimeISO
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  createdAt: DateTimeISO
  expires: DateTimeISO!
  sessionToken: String!
  updatedAt: DateTimeISO
}

type SessionGroupBy {
  _avg: SessionAvgAggregate
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
  _sum: SessionSumAggregate
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  sessionToken: String!
  updatedAt: DateTimeISO!
  userId: Int!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

type SessionMaxAggregate {
  createdAt: DateTimeISO
  expires: DateTimeISO
  sessionToken: String
  updatedAt: DateTimeISO
  userId: Int
}

input SessionMaxOrderByAggregateInput {
  createdAt: SortOrder
  expires: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type SessionMinAggregate {
  createdAt: DateTimeISO
  expires: DateTimeISO
  sessionToken: String
  updatedAt: DateTimeISO
  userId: Int
}

input SessionMinOrderByAggregateInput {
  createdAt: SortOrder
  expires: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionOrderByWithAggregationInput {
  _avg: SessionAvgOrderByAggregateInput
  _count: SessionCountOrderByAggregateInput
  _max: SessionMaxOrderByAggregateInput
  _min: SessionMinOrderByAggregateInput
  _sum: SessionSumOrderByAggregateInput
  createdAt: SortOrder
  expires: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SessionOrderByWithRelationInput {
  createdAt: SortOrder
  expires: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  createdAt
  expires
  sessionToken
  updatedAt
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  sessionToken: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput!]
  NOT: [SessionScalarWhereWithAggregatesInput!]
  OR: [SessionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  expires: DateTimeWithAggregatesFilter
  sessionToken: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type SessionSumAggregate {
  userId: Int
}

input SessionSumOrderByAggregateInput {
  userId: SortOrder
}

input SessionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSessionsNestedInput
}

input SessionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserNestedInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  sessionToken: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input SessionWhereUniqueInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  sessionToken: String
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

"""
This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
"""
type Spatial_ref_sys {
  auth_name: String
  auth_srid: Int
  proj4text: String
  srid: ID!
  srtext: String
}

type Spatial_ref_sysAvgAggregate {
  auth_srid: Float
  srid: Float
}

input Spatial_ref_sysAvgOrderByAggregateInput {
  auth_srid: SortOrder
  srid: SortOrder
}

type Spatial_ref_sysCountAggregate {
  _all: Int!
  auth_name: Int!
  auth_srid: Int!
  proj4text: Int!
  srid: Int!
  srtext: Int!
}

input Spatial_ref_sysCountOrderByAggregateInput {
  auth_name: SortOrder
  auth_srid: SortOrder
  proj4text: SortOrder
  srid: SortOrder
  srtext: SortOrder
}

input Spatial_ref_sysCreateInput {
  auth_name: String
  auth_srid: Int
  proj4text: String
  srid: Int!
  srtext: String
}

input Spatial_ref_sysCreateManyInput {
  auth_name: String
  auth_srid: Int
  proj4text: String
  srid: Int!
  srtext: String
}

type Spatial_ref_sysGroupBy {
  _avg: Spatial_ref_sysAvgAggregate
  _count: Spatial_ref_sysCountAggregate
  _max: Spatial_ref_sysMaxAggregate
  _min: Spatial_ref_sysMinAggregate
  _sum: Spatial_ref_sysSumAggregate
  auth_name: String
  auth_srid: Int
  proj4text: String
  srid: Int!
  srtext: String
}

type Spatial_ref_sysMaxAggregate {
  auth_name: String
  auth_srid: Int
  proj4text: String
  srid: Int
  srtext: String
}

input Spatial_ref_sysMaxOrderByAggregateInput {
  auth_name: SortOrder
  auth_srid: SortOrder
  proj4text: SortOrder
  srid: SortOrder
  srtext: SortOrder
}

type Spatial_ref_sysMinAggregate {
  auth_name: String
  auth_srid: Int
  proj4text: String
  srid: Int
  srtext: String
}

input Spatial_ref_sysMinOrderByAggregateInput {
  auth_name: SortOrder
  auth_srid: SortOrder
  proj4text: SortOrder
  srid: SortOrder
  srtext: SortOrder
}

input Spatial_ref_sysOrderByWithAggregationInput {
  _avg: Spatial_ref_sysAvgOrderByAggregateInput
  _count: Spatial_ref_sysCountOrderByAggregateInput
  _max: Spatial_ref_sysMaxOrderByAggregateInput
  _min: Spatial_ref_sysMinOrderByAggregateInput
  _sum: Spatial_ref_sysSumOrderByAggregateInput
  auth_name: SortOrderInput
  auth_srid: SortOrderInput
  proj4text: SortOrderInput
  srid: SortOrder
  srtext: SortOrderInput
}

input Spatial_ref_sysOrderByWithRelationInput {
  auth_name: SortOrderInput
  auth_srid: SortOrderInput
  proj4text: SortOrderInput
  srid: SortOrder
  srtext: SortOrderInput
}

enum Spatial_ref_sysScalarFieldEnum {
  auth_name
  auth_srid
  proj4text
  srid
  srtext
}

input Spatial_ref_sysScalarWhereWithAggregatesInput {
  AND: [Spatial_ref_sysScalarWhereWithAggregatesInput!]
  NOT: [Spatial_ref_sysScalarWhereWithAggregatesInput!]
  OR: [Spatial_ref_sysScalarWhereWithAggregatesInput!]
  auth_name: StringNullableWithAggregatesFilter
  auth_srid: IntNullableWithAggregatesFilter
  proj4text: StringNullableWithAggregatesFilter
  srid: IntWithAggregatesFilter
  srtext: StringNullableWithAggregatesFilter
}

type Spatial_ref_sysSumAggregate {
  auth_srid: Int
  srid: Int
}

input Spatial_ref_sysSumOrderByAggregateInput {
  auth_srid: SortOrder
  srid: SortOrder
}

input Spatial_ref_sysUpdateInput {
  auth_name: NullableStringFieldUpdateOperationsInput
  auth_srid: NullableIntFieldUpdateOperationsInput
  proj4text: NullableStringFieldUpdateOperationsInput
  srid: IntFieldUpdateOperationsInput
  srtext: NullableStringFieldUpdateOperationsInput
}

input Spatial_ref_sysUpdateManyMutationInput {
  auth_name: NullableStringFieldUpdateOperationsInput
  auth_srid: NullableIntFieldUpdateOperationsInput
  proj4text: NullableStringFieldUpdateOperationsInput
  srid: IntFieldUpdateOperationsInput
  srtext: NullableStringFieldUpdateOperationsInput
}

input Spatial_ref_sysWhereInput {
  AND: [Spatial_ref_sysWhereInput!]
  NOT: [Spatial_ref_sysWhereInput!]
  OR: [Spatial_ref_sysWhereInput!]
  auth_name: StringNullableFilter
  auth_srid: IntNullableFilter
  proj4text: StringNullableFilter
  srid: IntFilter
  srtext: StringNullableFilter
}

input Spatial_ref_sysWhereUniqueInput {
  AND: [Spatial_ref_sysWhereInput!]
  NOT: [Spatial_ref_sysWhereInput!]
  OR: [Spatial_ref_sysWhereInput!]
  auth_name: StringNullableFilter
  auth_srid: IntNullableFilter
  proj4text: StringNullableFilter
  srid: Int
  srtext: StringNullableFilter
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  chat(chatId: Int!): ChatMessage!
}

type User {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  addresses(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddress!]!
  babyBirth: DateTimeISO
  chatMessages(cursor: ChatMessageWhereUniqueInput, distinct: [ChatMessageScalarFieldEnum!], orderBy: [ChatMessageOrderByWithRelationInput!], skip: Int, take: Int, where: ChatMessageWhereInput): [ChatMessage!]!
  chats(cursor: ChatUserWhereUniqueInput, distinct: [ChatUserScalarFieldEnum!], orderBy: [ChatUserOrderByWithRelationInput!], skip: Int, take: Int, where: ChatUserWhereInput): [ChatUser!]!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  content: String
  createdAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  files(cursor: UserFileWhereUniqueInput, distinct: [UserFileScalarFieldEnum!], orderBy: [UserFileOrderByWithRelationInput!], skip: Int, take: Int, where: UserFileWhereInput): [UserFile!]!
  id: ID!
  image: String
  name: String
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  role: Role!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  updatedAt: DateTimeISO!
  username: String
}

type UserAddress {
  address: Address!
  addressId: Int!
  createdAt: DateTimeISO!
  id: ID!
  updatedAt: DateTimeISO!
  user: User!
  userId: Int!
}

type UserAddressAvgAggregate {
  addressId: Float
  id: Float
  userId: Float
}

input UserAddressAvgOrderByAggregateInput {
  addressId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type UserAddressCountAggregate {
  _all: Int!
  addressId: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input UserAddressCountOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserAddressCreateInput {
  address: AddressCreateNestedOneWithoutUsersInput!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutAddressesInput!
}

input UserAddressCreateManyAddressInput {
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input UserAddressCreateManyAddressInputEnvelope {
  data: [UserAddressCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input UserAddressCreateManyInput {
  addressId: Int!
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input UserAddressCreateManyUserInput {
  addressId: Int!
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
}

input UserAddressCreateManyUserInputEnvelope {
  data: [UserAddressCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserAddressCreateNestedManyWithoutUserInput {
  connect: [UserAddressWhereUniqueInput!]
  connectOrCreate: [UserAddressCreateOrConnectWithoutUserInput!]
  create: [UserAddressCreateWithoutUserInput!]
  createMany: UserAddressCreateManyUserInputEnvelope
}

input UserAddressCreateOrConnectWithoutAddressInput {
  create: UserAddressCreateWithoutAddressInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressCreateOrConnectWithoutUserInput {
  create: UserAddressCreateWithoutUserInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressCreateWithoutAddressInput {
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutAddressesInput!
}

input UserAddressCreateWithoutUserInput {
  address: AddressCreateNestedOneWithoutUsersInput!
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
}

type UserAddressGroupBy {
  _avg: UserAddressAvgAggregate
  _count: UserAddressCountAggregate
  _max: UserAddressMaxAggregate
  _min: UserAddressMinAggregate
  _sum: UserAddressSumAggregate
  addressId: Int!
  createdAt: DateTimeISO!
  id: Int!
  updatedAt: DateTimeISO!
  userId: Int!
}

input UserAddressListRelationFilter {
  every: UserAddressWhereInput
  none: UserAddressWhereInput
  some: UserAddressWhereInput
}

type UserAddressMaxAggregate {
  addressId: Int
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int
}

input UserAddressMaxOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type UserAddressMinAggregate {
  addressId: Int
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int
}

input UserAddressMinOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserAddressOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserAddressOrderByWithAggregationInput {
  _avg: UserAddressAvgOrderByAggregateInput
  _count: UserAddressCountOrderByAggregateInput
  _max: UserAddressMaxOrderByAggregateInput
  _min: UserAddressMinOrderByAggregateInput
  _sum: UserAddressSumOrderByAggregateInput
  addressId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserAddressOrderByWithRelationInput {
  address: AddressOrderByWithRelationInput
  addressId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserAddressScalarFieldEnum {
  addressId
  createdAt
  id
  updatedAt
  userId
}

input UserAddressScalarWhereInput {
  AND: [UserAddressScalarWhereInput!]
  NOT: [UserAddressScalarWhereInput!]
  OR: [UserAddressScalarWhereInput!]
  addressId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input UserAddressScalarWhereWithAggregatesInput {
  AND: [UserAddressScalarWhereWithAggregatesInput!]
  NOT: [UserAddressScalarWhereWithAggregatesInput!]
  OR: [UserAddressScalarWhereWithAggregatesInput!]
  addressId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type UserAddressSumAggregate {
  addressId: Int
  id: Int
  userId: Int
}

input UserAddressSumOrderByAggregateInput {
  addressId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserAddressUpdateInput {
  address: AddressUpdateOneRequiredWithoutUsersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAddressesNestedInput
}

input UserAddressUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserAddressUpdateManyWithWhereWithoutAddressInput {
  data: UserAddressUpdateManyMutationInput!
  where: UserAddressScalarWhereInput!
}

input UserAddressUpdateManyWithWhereWithoutUserInput {
  data: UserAddressUpdateManyMutationInput!
  where: UserAddressScalarWhereInput!
}

input UserAddressUpdateManyWithoutAddressNestedInput {
  connect: [UserAddressWhereUniqueInput!]
  connectOrCreate: [UserAddressCreateOrConnectWithoutAddressInput!]
  create: [UserAddressCreateWithoutAddressInput!]
  createMany: UserAddressCreateManyAddressInputEnvelope
  delete: [UserAddressWhereUniqueInput!]
  deleteMany: [UserAddressScalarWhereInput!]
  disconnect: [UserAddressWhereUniqueInput!]
  set: [UserAddressWhereUniqueInput!]
  update: [UserAddressUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [UserAddressUpdateManyWithWhereWithoutAddressInput!]
  upsert: [UserAddressUpsertWithWhereUniqueWithoutAddressInput!]
}

input UserAddressUpdateManyWithoutUserNestedInput {
  connect: [UserAddressWhereUniqueInput!]
  connectOrCreate: [UserAddressCreateOrConnectWithoutUserInput!]
  create: [UserAddressCreateWithoutUserInput!]
  createMany: UserAddressCreateManyUserInputEnvelope
  delete: [UserAddressWhereUniqueInput!]
  deleteMany: [UserAddressScalarWhereInput!]
  disconnect: [UserAddressWhereUniqueInput!]
  set: [UserAddressWhereUniqueInput!]
  update: [UserAddressUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserAddressUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserAddressUpsertWithWhereUniqueWithoutUserInput!]
}

input UserAddressUpdateWithWhereUniqueWithoutAddressInput {
  data: UserAddressUpdateWithoutAddressInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressUpdateWithWhereUniqueWithoutUserInput {
  data: UserAddressUpdateWithoutUserInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressUpdateWithoutAddressInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAddressesNestedInput
}

input UserAddressUpdateWithoutUserInput {
  address: AddressUpdateOneRequiredWithoutUsersNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserAddressUpsertWithWhereUniqueWithoutAddressInput {
  create: UserAddressCreateWithoutAddressInput!
  update: UserAddressUpdateWithoutAddressInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressUpsertWithWhereUniqueWithoutUserInput {
  create: UserAddressCreateWithoutUserInput!
  update: UserAddressUpdateWithoutUserInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressWhereInput {
  AND: [UserAddressWhereInput!]
  NOT: [UserAddressWhereInput!]
  OR: [UserAddressWhereInput!]
  address: AddressRelationFilter
  addressId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input UserAddressWhereUniqueInput {
  AND: [UserAddressWhereInput!]
  NOT: [UserAddressWhereInput!]
  OR: [UserAddressWhereInput!]
  address: AddressRelationFilter
  addressId: IntFilter
  createdAt: DateTimeFilter
  id: Int
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

type UserAvgAggregate {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCount {
  accounts(where: AccountWhereInput): Int!
  addresses(where: UserAddressWhereInput): Int!
  chatMessages(where: ChatMessageWhereInput): Int!
  chats(where: ChatUserWhereInput): Int!
  comments(where: CommentWhereInput): Int!
  files(where: UserFileWhereInput): Int!
  posts(where: PostWhereInput): Int!
  sessions(where: SessionWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  babyBirth: Int!
  content: Int!
  createdAt: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  image: Int!
  name: Int!
  role: Int!
  updatedAt: Int!
  username: Int!
}

input UserCountOrderByAggregateInput {
  babyBirth: SortOrder
  content: SortOrder
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  addresses: UserAddressCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chatMessages: ChatMessageCreateNestedManyWithoutUserInput
  chats: ChatUserCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  files: UserFileCreateNestedManyWithoutUserInput
  image: String
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String
}

input UserCreateManyInput {
  babyBirth: DateTimeISO
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: Int
  image: String
  name: String
  role: Role
  updatedAt: DateTimeISO
  username: String
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutAddressesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAddressesInput
  create: UserCreateWithoutAddressesInput
}

input UserCreateNestedOneWithoutChatMessagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChatMessagesInput
  create: UserCreateWithoutChatMessagesInput
}

input UserCreateNestedOneWithoutChatsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChatsInput
  create: UserCreateWithoutChatsInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutFilesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFilesInput
  create: UserCreateWithoutFilesInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutChatMessagesInput {
  create: UserCreateWithoutChatMessagesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutChatsInput {
  create: UserCreateWithoutChatsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFilesInput {
  create: UserCreateWithoutFilesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  addresses: UserAddressCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chatMessages: ChatMessageCreateNestedManyWithoutUserInput
  chats: ChatUserCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  files: UserFileCreateNestedManyWithoutUserInput
  image: String
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String
}

input UserCreateWithoutAddressesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chatMessages: ChatMessageCreateNestedManyWithoutUserInput
  chats: ChatUserCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  files: UserFileCreateNestedManyWithoutUserInput
  image: String
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String
}

input UserCreateWithoutChatMessagesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  addresses: UserAddressCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chats: ChatUserCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  files: UserFileCreateNestedManyWithoutUserInput
  image: String
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String
}

input UserCreateWithoutChatsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  addresses: UserAddressCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chatMessages: ChatMessageCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  files: UserFileCreateNestedManyWithoutUserInput
  image: String
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String
}

input UserCreateWithoutCommentsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  addresses: UserAddressCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chatMessages: ChatMessageCreateNestedManyWithoutUserInput
  chats: ChatUserCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  files: UserFileCreateNestedManyWithoutUserInput
  image: String
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String
}

input UserCreateWithoutFilesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  addresses: UserAddressCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chatMessages: ChatMessageCreateNestedManyWithoutUserInput
  chats: ChatUserCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  image: String
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String
}

input UserCreateWithoutPostsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  addresses: UserAddressCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chatMessages: ChatMessageCreateNestedManyWithoutUserInput
  chats: ChatUserCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  files: UserFileCreateNestedManyWithoutUserInput
  image: String
  name: String
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String
}

input UserCreateWithoutSessionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  addresses: UserAddressCreateNestedManyWithoutUserInput
  babyBirth: DateTimeISO
  chatMessages: ChatMessageCreateNestedManyWithoutUserInput
  chats: ChatUserCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  content: String
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  files: UserFileCreateNestedManyWithoutUserInput
  image: String
  name: String
  posts: PostCreateNestedManyWithoutUserInput
  role: Role
  updatedAt: DateTimeISO
  username: String
}

type UserFile {
  createdAt: DateTimeISO!
  file: File!
  fileId: Int!
  id: ID!
  updatedAt: DateTimeISO!
  user: User!
  userId: Int!
}

type UserFileAvgAggregate {
  fileId: Float
  id: Float
  userId: Float
}

input UserFileAvgOrderByAggregateInput {
  fileId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type UserFileCountAggregate {
  _all: Int!
  createdAt: Int!
  fileId: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input UserFileCountOrderByAggregateInput {
  createdAt: SortOrder
  fileId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserFileCreateInput {
  createdAt: DateTimeISO
  file: FileCreateNestedOneWithoutFilesInput!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutFilesInput!
}

input UserFileCreateManyFileInput {
  createdAt: DateTimeISO
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input UserFileCreateManyFileInputEnvelope {
  data: [UserFileCreateManyFileInput!]!
  skipDuplicates: Boolean
}

input UserFileCreateManyInput {
  createdAt: DateTimeISO
  fileId: Int!
  id: Int
  updatedAt: DateTimeISO
  userId: Int!
}

input UserFileCreateManyUserInput {
  createdAt: DateTimeISO
  fileId: Int!
  id: Int
  updatedAt: DateTimeISO
}

input UserFileCreateManyUserInputEnvelope {
  data: [UserFileCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserFileCreateNestedManyWithoutFileInput {
  connect: [UserFileWhereUniqueInput!]
  connectOrCreate: [UserFileCreateOrConnectWithoutFileInput!]
  create: [UserFileCreateWithoutFileInput!]
  createMany: UserFileCreateManyFileInputEnvelope
}

input UserFileCreateNestedManyWithoutUserInput {
  connect: [UserFileWhereUniqueInput!]
  connectOrCreate: [UserFileCreateOrConnectWithoutUserInput!]
  create: [UserFileCreateWithoutUserInput!]
  createMany: UserFileCreateManyUserInputEnvelope
}

input UserFileCreateOrConnectWithoutFileInput {
  create: UserFileCreateWithoutFileInput!
  where: UserFileWhereUniqueInput!
}

input UserFileCreateOrConnectWithoutUserInput {
  create: UserFileCreateWithoutUserInput!
  where: UserFileWhereUniqueInput!
}

input UserFileCreateWithoutFileInput {
  createdAt: DateTimeISO
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutFilesInput!
}

input UserFileCreateWithoutUserInput {
  createdAt: DateTimeISO
  file: FileCreateNestedOneWithoutFilesInput!
  updatedAt: DateTimeISO
}

type UserFileGroupBy {
  _avg: UserFileAvgAggregate
  _count: UserFileCountAggregate
  _max: UserFileMaxAggregate
  _min: UserFileMinAggregate
  _sum: UserFileSumAggregate
  createdAt: DateTimeISO!
  fileId: Int!
  id: Int!
  updatedAt: DateTimeISO!
  userId: Int!
}

input UserFileListRelationFilter {
  every: UserFileWhereInput
  none: UserFileWhereInput
  some: UserFileWhereInput
}

type UserFileMaxAggregate {
  createdAt: DateTimeISO
  fileId: Int
  id: Int
  updatedAt: DateTimeISO
  userId: Int
}

input UserFileMaxOrderByAggregateInput {
  createdAt: SortOrder
  fileId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type UserFileMinAggregate {
  createdAt: DateTimeISO
  fileId: Int
  id: Int
  updatedAt: DateTimeISO
  userId: Int
}

input UserFileMinOrderByAggregateInput {
  createdAt: SortOrder
  fileId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserFileOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserFileOrderByWithAggregationInput {
  _avg: UserFileAvgOrderByAggregateInput
  _count: UserFileCountOrderByAggregateInput
  _max: UserFileMaxOrderByAggregateInput
  _min: UserFileMinOrderByAggregateInput
  _sum: UserFileSumOrderByAggregateInput
  createdAt: SortOrder
  fileId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserFileOrderByWithRelationInput {
  createdAt: SortOrder
  file: FileOrderByWithRelationInput
  fileId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserFileScalarFieldEnum {
  createdAt
  fileId
  id
  updatedAt
  userId
}

input UserFileScalarWhereInput {
  AND: [UserFileScalarWhereInput!]
  NOT: [UserFileScalarWhereInput!]
  OR: [UserFileScalarWhereInput!]
  createdAt: DateTimeFilter
  fileId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input UserFileScalarWhereWithAggregatesInput {
  AND: [UserFileScalarWhereWithAggregatesInput!]
  NOT: [UserFileScalarWhereWithAggregatesInput!]
  OR: [UserFileScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  fileId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type UserFileSumAggregate {
  fileId: Int
  id: Int
  userId: Int
}

input UserFileSumOrderByAggregateInput {
  fileId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input UserFileUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  file: FileUpdateOneRequiredWithoutFilesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutFilesNestedInput
}

input UserFileUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserFileUpdateManyWithWhereWithoutFileInput {
  data: UserFileUpdateManyMutationInput!
  where: UserFileScalarWhereInput!
}

input UserFileUpdateManyWithWhereWithoutUserInput {
  data: UserFileUpdateManyMutationInput!
  where: UserFileScalarWhereInput!
}

input UserFileUpdateManyWithoutFileNestedInput {
  connect: [UserFileWhereUniqueInput!]
  connectOrCreate: [UserFileCreateOrConnectWithoutFileInput!]
  create: [UserFileCreateWithoutFileInput!]
  createMany: UserFileCreateManyFileInputEnvelope
  delete: [UserFileWhereUniqueInput!]
  deleteMany: [UserFileScalarWhereInput!]
  disconnect: [UserFileWhereUniqueInput!]
  set: [UserFileWhereUniqueInput!]
  update: [UserFileUpdateWithWhereUniqueWithoutFileInput!]
  updateMany: [UserFileUpdateManyWithWhereWithoutFileInput!]
  upsert: [UserFileUpsertWithWhereUniqueWithoutFileInput!]
}

input UserFileUpdateManyWithoutUserNestedInput {
  connect: [UserFileWhereUniqueInput!]
  connectOrCreate: [UserFileCreateOrConnectWithoutUserInput!]
  create: [UserFileCreateWithoutUserInput!]
  createMany: UserFileCreateManyUserInputEnvelope
  delete: [UserFileWhereUniqueInput!]
  deleteMany: [UserFileScalarWhereInput!]
  disconnect: [UserFileWhereUniqueInput!]
  set: [UserFileWhereUniqueInput!]
  update: [UserFileUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserFileUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserFileUpsertWithWhereUniqueWithoutUserInput!]
}

input UserFileUpdateWithWhereUniqueWithoutFileInput {
  data: UserFileUpdateWithoutFileInput!
  where: UserFileWhereUniqueInput!
}

input UserFileUpdateWithWhereUniqueWithoutUserInput {
  data: UserFileUpdateWithoutUserInput!
  where: UserFileWhereUniqueInput!
}

input UserFileUpdateWithoutFileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutFilesNestedInput
}

input UserFileUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  file: FileUpdateOneRequiredWithoutFilesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserFileUpsertWithWhereUniqueWithoutFileInput {
  create: UserFileCreateWithoutFileInput!
  update: UserFileUpdateWithoutFileInput!
  where: UserFileWhereUniqueInput!
}

input UserFileUpsertWithWhereUniqueWithoutUserInput {
  create: UserFileCreateWithoutUserInput!
  update: UserFileUpdateWithoutUserInput!
  where: UserFileWhereUniqueInput!
}

input UserFileWhereInput {
  AND: [UserFileWhereInput!]
  NOT: [UserFileWhereInput!]
  OR: [UserFileWhereInput!]
  createdAt: DateTimeFilter
  file: FileRelationFilter
  fileId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input UserFileWhereUniqueInput {
  AND: [UserFileWhereInput!]
  NOT: [UserFileWhereInput!]
  OR: [UserFileWhereInput!]
  createdAt: DateTimeFilter
  file: FileRelationFilter
  fileId: IntFilter
  id: Int
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  babyBirth: DateTimeISO
  content: String
  createdAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  id: Int!
  image: String
  name: String
  role: Role!
  updatedAt: DateTimeISO!
  username: String
}

type UserMaxAggregate {
  babyBirth: DateTimeISO
  content: String
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: Int
  image: String
  name: String
  role: Role
  updatedAt: DateTimeISO
  username: String
}

input UserMaxOrderByAggregateInput {
  babyBirth: SortOrder
  content: SortOrder
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

type UserMinAggregate {
  babyBirth: DateTimeISO
  content: String
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: Int
  image: String
  name: String
  role: Role
  updatedAt: DateTimeISO
  username: String
}

input UserMinOrderByAggregateInput {
  babyBirth: SortOrder
  content: SortOrder
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  babyBirth: SortOrderInput
  content: SortOrderInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrderInput
  id: SortOrder
  image: SortOrderInput
  name: SortOrderInput
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrderInput
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  addresses: UserAddressOrderByRelationAggregateInput
  babyBirth: SortOrderInput
  chatMessages: ChatMessageOrderByRelationAggregateInput
  chats: ChatUserOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  content: SortOrderInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrderInput
  files: UserFileOrderByRelationAggregateInput
  id: SortOrder
  image: SortOrderInput
  name: SortOrderInput
  posts: PostOrderByRelationAggregateInput
  role: SortOrder
  sessions: SessionOrderByRelationAggregateInput
  updatedAt: SortOrder
  username: SortOrderInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  babyBirth
  content
  createdAt
  email
  emailVerified
  id
  image
  name
  role
  updatedAt
  username
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  babyBirth: DateTimeNullableWithAggregatesFilter
  content: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  username: StringNullableWithAggregatesFilter
}

type UserSumAggregate {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  addresses: UserAddressUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chatMessages: ChatMessageUpdateManyWithoutUserNestedInput
  chats: ChatUserUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutUserNestedInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutAddressesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAddressesInput
  create: UserCreateWithoutAddressesInput
  update: UserUpdateToOneWithWhereWithoutAddressesInput
  upsert: UserUpsertWithoutAddressesInput
}

input UserUpdateOneRequiredWithoutChatMessagesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChatMessagesInput
  create: UserCreateWithoutChatMessagesInput
  update: UserUpdateToOneWithWhereWithoutChatMessagesInput
  upsert: UserUpsertWithoutChatMessagesInput
}

input UserUpdateOneRequiredWithoutChatsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChatsInput
  create: UserCreateWithoutChatsInput
  update: UserUpdateToOneWithWhereWithoutChatsInput
  upsert: UserUpsertWithoutChatsInput
}

input UserUpdateOneRequiredWithoutCommentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateToOneWithWhereWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutFilesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFilesInput
  create: UserCreateWithoutFilesInput
  update: UserUpdateToOneWithWhereWithoutFilesInput
  upsert: UserUpsertWithoutFilesInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateToOneWithWhereWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutSessionsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
  update: UserUpdateToOneWithWhereWithoutSessionsInput
  upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  data: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutAddressesInput {
  data: UserUpdateWithoutAddressesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutChatMessagesInput {
  data: UserUpdateWithoutChatMessagesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutChatsInput {
  data: UserUpdateWithoutChatsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutCommentsInput {
  data: UserUpdateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutFilesInput {
  data: UserUpdateWithoutFilesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutPostsInput {
  data: UserUpdateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSessionsInput {
  data: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAccountsInput {
  addresses: UserAddressUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chatMessages: ChatMessageUpdateManyWithoutUserNestedInput
  chats: ChatUserUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutUserNestedInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutAddressesInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chatMessages: ChatMessageUpdateManyWithoutUserNestedInput
  chats: ChatUserUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutUserNestedInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutChatMessagesInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  addresses: UserAddressUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chats: ChatUserUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutUserNestedInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutChatsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  addresses: UserAddressUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chatMessages: ChatMessageUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutUserNestedInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  addresses: UserAddressUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chatMessages: ChatMessageUpdateManyWithoutUserNestedInput
  chats: ChatUserUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutUserNestedInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFilesInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  addresses: UserAddressUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chatMessages: ChatMessageUpdateManyWithoutUserNestedInput
  chats: ChatUserUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  addresses: UserAddressUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chatMessages: ChatMessageUpdateManyWithoutUserNestedInput
  chats: ChatUserUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutUserNestedInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutSessionsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  addresses: UserAddressUpdateManyWithoutUserNestedInput
  babyBirth: NullableDateTimeFieldUpdateOperationsInput
  chatMessages: ChatMessageUpdateManyWithoutUserNestedInput
  chats: ChatUserUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  files: UserFileUpdateManyWithoutUserNestedInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpsertWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput!
  update: UserUpdateWithoutAddressesInput!
  where: UserWhereInput
}

input UserUpsertWithoutChatMessagesInput {
  create: UserCreateWithoutChatMessagesInput!
  update: UserUpdateWithoutChatMessagesInput!
  where: UserWhereInput
}

input UserUpsertWithoutChatsInput {
  create: UserCreateWithoutChatsInput!
  update: UserUpdateWithoutChatsInput!
  where: UserWhereInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpsertWithoutFilesInput {
  create: UserCreateWithoutFilesInput!
  update: UserUpdateWithoutFilesInput!
  where: UserWhereInput
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpsertWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  update: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  addresses: UserAddressListRelationFilter
  babyBirth: DateTimeNullableFilter
  chatMessages: ChatMessageListRelationFilter
  chats: ChatUserListRelationFilter
  comments: CommentListRelationFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  files: UserFileListRelationFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  posts: PostListRelationFilter
  role: EnumRoleFilter
  sessions: SessionListRelationFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  addresses: UserAddressListRelationFilter
  babyBirth: DateTimeNullableFilter
  chatMessages: ChatMessageListRelationFilter
  chats: ChatUserListRelationFilter
  comments: CommentListRelationFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  email: String
  emailVerified: DateTimeNullableFilter
  files: UserFileListRelationFilter
  id: Int
  image: StringNullableFilter
  name: StringNullableFilter
  posts: PostListRelationFilter
  role: EnumRoleFilter
  sessions: SessionListRelationFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
}

type VerificationToken {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

type VerificationTokenCountAggregate {
  _all: Int!
  expires: Int!
  identifier: Int!
  token: Int!
}

input VerificationTokenCountOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenCreateInput {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

input VerificationTokenCreateManyInput {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

type VerificationTokenGroupBy {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

input VerificationTokenIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

type VerificationTokenMaxAggregate {
  expires: DateTimeISO
  identifier: String
  token: String
}

input VerificationTokenMaxOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

type VerificationTokenMinAggregate {
  expires: DateTimeISO
  identifier: String
  token: String
}

input VerificationTokenMinOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithAggregationInput {
  _count: VerificationTokenCountOrderByAggregateInput
  _max: VerificationTokenMaxOrderByAggregateInput
  _min: VerificationTokenMinOrderByAggregateInput
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithRelationInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

enum VerificationTokenScalarFieldEnum {
  expires
  identifier
  token
}

input VerificationTokenScalarWhereWithAggregatesInput {
  AND: [VerificationTokenScalarWhereWithAggregatesInput!]
  NOT: [VerificationTokenScalarWhereWithAggregatesInput!]
  OR: [VerificationTokenScalarWhereWithAggregatesInput!]
  expires: DateTimeWithAggregatesFilter
  identifier: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input VerificationTokenUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  identifier: StringFilter
  token: StringFilter
}

input VerificationTokenWhereUniqueInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  identifier: StringFilter
  identifier_token: VerificationTokenIdentifierTokenCompoundUniqueInput
  token: StringFilter
}

type n {
  lg: String
  md: String
  raw: String
  sm: String
}